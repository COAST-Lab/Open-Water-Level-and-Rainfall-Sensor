
c:/Users/ppita/Documents/Particle/Open-Water-Level-and-Rainfall-Sensor/Firmware/readRainfall/target/6.3.3/boron/readRainfall.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001f1c  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5f3c  000b5f3c  00005f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000068  2003de90  000b5f60  0000de90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000104  2003def8  2003def8  0001def8  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b5fc8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b5fcc  000b5fcc  00015fcc  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b5fd2  000b5fd2  00015fd2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b5ff6  000b5ff6  00015ff6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0016a0c1  00000000  00000000  00015ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000144ae  00000000  00000000  001800bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00047d9a  00000000  00000000  00194569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002e60  00000000  00000000  001dc303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000cce8  00000000  00000000  001df163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00059e6c  00000000  00000000  001ebe4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004ae1c  00000000  00000000  00245cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a5f2b  00000000  00000000  00290ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000834c  00000000  00000000  00436a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__aeabi_d2f>:
   b47bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b47c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b47c4:	bf24      	itt	cs
   b47c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b47ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b47ce:	d90d      	bls.n	b47ec <__aeabi_d2f+0x30>
   b47d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b47d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b47d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b47dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b47e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b47e4:	bf08      	it	eq
   b47e6:	f020 0001 	biceq.w	r0, r0, #1
   b47ea:	4770      	bx	lr
   b47ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b47f0:	d121      	bne.n	b4836 <__aeabi_d2f+0x7a>
   b47f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b47f6:	bfbc      	itt	lt
   b47f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b47fc:	4770      	bxlt	lr
   b47fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4802:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4806:	f1c2 0218 	rsb	r2, r2, #24
   b480a:	f1c2 0c20 	rsb	ip, r2, #32
   b480e:	fa10 f30c 	lsls.w	r3, r0, ip
   b4812:	fa20 f002 	lsr.w	r0, r0, r2
   b4816:	bf18      	it	ne
   b4818:	f040 0001 	orrne.w	r0, r0, #1
   b481c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4820:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b4824:	fa03 fc0c 	lsl.w	ip, r3, ip
   b4828:	ea40 000c 	orr.w	r0, r0, ip
   b482c:	fa23 f302 	lsr.w	r3, r3, r2
   b4830:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4834:	e7cc      	b.n	b47d0 <__aeabi_d2f+0x14>
   b4836:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b483a:	d107      	bne.n	b484c <__aeabi_d2f+0x90>
   b483c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4840:	bf1e      	ittt	ne
   b4842:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4846:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b484a:	4770      	bxne	lr
   b484c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b4850:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4854:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4858:	4770      	bx	lr
   b485a:	bf00      	nop

000b485c <strlen>:
   b485c:	4603      	mov	r3, r0
   b485e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4862:	2a00      	cmp	r2, #0
   b4864:	d1fb      	bne.n	b485e <strlen+0x2>
   b4866:	1a18      	subs	r0, r3, r0
   b4868:	3801      	subs	r0, #1
   b486a:	4770      	bx	lr

000b486c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b486c:	4809      	ldr	r0, [pc, #36]	; (b4894 <module_user_pre_init+0x28>)
   b486e:	490a      	ldr	r1, [pc, #40]	; (b4898 <module_user_pre_init+0x2c>)
   b4870:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4872:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4874:	d005      	beq.n	b4882 <module_user_pre_init+0x16>
   b4876:	4a09      	ldr	r2, [pc, #36]	; (b489c <module_user_pre_init+0x30>)
   b4878:	4282      	cmp	r2, r0
   b487a:	d002      	beq.n	b4882 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b487c:	1a12      	subs	r2, r2, r0
   b487e:	f001 f97b 	bl	b5b78 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4882:	4807      	ldr	r0, [pc, #28]	; (b48a0 <module_user_pre_init+0x34>)
   b4884:	4a07      	ldr	r2, [pc, #28]	; (b48a4 <module_user_pre_init+0x38>)
   b4886:	2100      	movs	r1, #0
   b4888:	1a12      	subs	r2, r2, r0
   b488a:	f001 f983 	bl	b5b94 <memset>
    return &link_global_data_start;
}
   b488e:	4801      	ldr	r0, [pc, #4]	; (b4894 <module_user_pre_init+0x28>)
   b4890:	bd08      	pop	{r3, pc}
   b4892:	bf00      	nop
   b4894:	2003de90 	.word	0x2003de90
   b4898:	000b5f60 	.word	0x000b5f60
   b489c:	2003def8 	.word	0x2003def8
   b48a0:	2003def8 	.word	0x2003def8
   b48a4:	2003dffc 	.word	0x2003dffc

000b48a8 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b48a8:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48aa:	4e07      	ldr	r6, [pc, #28]	; (b48c8 <module_user_init+0x20>)
   b48ac:	4c07      	ldr	r4, [pc, #28]	; (b48cc <module_user_init+0x24>)
    module_user_init_hook();
   b48ae:	f000 fd93 	bl	b53d8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48b2:	1ba4      	subs	r4, r4, r6
   b48b4:	08a4      	lsrs	r4, r4, #2
   b48b6:	2500      	movs	r5, #0
   b48b8:	42ac      	cmp	r4, r5
   b48ba:	d100      	bne.n	b48be <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b48bc:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b48be:	f856 3b04 	ldr.w	r3, [r6], #4
   b48c2:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48c4:	3501      	adds	r5, #1
   b48c6:	e7f7      	b.n	b48b8 <module_user_init+0x10>
   b48c8:	000b5f0c 	.word	0x000b5f0c
   b48cc:	000b5f3c 	.word	0x000b5f3c

000b48d0 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b48d0:	f000 b824 	b.w	b491c <setup>

000b48d4 <module_user_loop>:
}

void module_user_loop() {
   b48d4:	b508      	push	{r3, lr}
    loop();
   b48d6:	f000 f843 	bl	b4960 <loop>
    _post_loop();
}
   b48da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b48de:	f000 bd33 	b.w	b5348 <_post_loop>

000b48e2 <_Znaj>:
   b48e2:	f000 bbc3 	b.w	b506c <malloc>

000b48e6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b48e6:	f000 bbc9 	b.w	b507c <free>

000b48ea <__register_exitproc>:
int __cxa_atexit(void (*f)(void *), void *p, void *d) {
    return 0;
}

void __register_exitproc(int type, void (*fn)(void), void* arg, void* d) {
}
   b48ea:	4770      	bx	lr

000b48ec <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b48ec:	b40e      	push	{r1, r2, r3}
   b48ee:	b500      	push	{lr}
   b48f0:	b08c      	sub	sp, #48	; 0x30
   b48f2:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b48f4:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b48f8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b48fc:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b48fe:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4902:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4904:	6801      	ldr	r1, [r0, #0]
   b4906:	aa04      	add	r2, sp, #16
   b4908:	201e      	movs	r0, #30
    attr.flags = 0;
   b490a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b490e:	f000 fb09 	bl	b4f24 <log_message_v>
}
   b4912:	b00c      	add	sp, #48	; 0x30
   b4914:	f85d eb04 	ldr.w	lr, [sp], #4
   b4918:	b003      	add	sp, #12
   b491a:	4770      	bx	lr

000b491c <setup>:
#include "DFRobot_RainfallSensor.h"


DFRobot_RainfallSensor_I2C Sensor(&Wire);

void setup() {
   b491c:	b570      	push	{r4, r5, r6, lr}
    Serial1.begin(9600);  // UART to sensor
   b491e:	f001 f8bf 	bl	b5aa0 <_Z22__fetch_global_Serial1v>
   b4922:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4926:	f000 ff23 	bl	b5770 <_ZN11USARTSerial5beginEm>
    //Serial.begin(115200); // USB debugging
    delay(1000);
   b492a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b492e:	f000 fcdf 	bl	b52f0 <delay>

    // Initialize sensor
    while (!Sensor.begin()) {
   b4932:	4e08      	ldr	r6, [pc, #32]	; (b4954 <setup+0x38>)
        Log.info("Sensor init err!!!");
   b4934:	4d08      	ldr	r5, [pc, #32]	; (b4958 <setup+0x3c>)
   b4936:	4c09      	ldr	r4, [pc, #36]	; (b495c <setup+0x40>)
    while (!Sensor.begin()) {
   b4938:	4630      	mov	r0, r6
   b493a:	f000 f9df 	bl	b4cfc <_ZN26DFRobot_RainfallSensor_I2C5beginEv>
   b493e:	b940      	cbnz	r0, b4952 <setup+0x36>
        Log.info("Sensor init err!!!");
   b4940:	4620      	mov	r0, r4
   b4942:	4629      	mov	r1, r5
   b4944:	f7ff ffd2 	bl	b48ec <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b4948:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b494c:	f000 fcd0 	bl	b52f0 <delay>
    while (!Sensor.begin()) {
   b4950:	e7f2      	b.n	b4938 <setup+0x1c>
    }

    // Log.info("Firmware Version:\t");
    // Log.info(Sensor.getFirmwareVersion());
}
   b4952:	bd70      	pop	{r4, r5, r6, pc}
   b4954:	2003def8 	.word	0x2003def8
   b4958:	000b5c14 	.word	0x000b5c14
   b495c:	2003df44 	.word	0x2003df44

000b4960 <loop>:

void loop() {
   b4960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    // Log via Particle console
    Log.info("Sensor WorkingTime: %.2f H", Sensor.getSensorWorkingTime());
   b4964:	4d36      	ldr	r5, [pc, #216]	; (b4a40 <loop+0xe0>)
   b4966:	4c37      	ldr	r4, [pc, #220]	; (b4a44 <loop+0xe4>)
   b4968:	f8df 90e4 	ldr.w	r9, [pc, #228]	; b4a50 <loop+0xf0>
    Log.info("Rainfall: %.2f mm", Sensor.getRainfall());
   b496c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; b4a54 <loop+0xf4>
    Log.info("1 Hour Rainfall: %.2f mm", Sensor.getRainfall(1));
   b4970:	4f35      	ldr	r7, [pc, #212]	; (b4a48 <loop+0xe8>)
    Log.info("Raw Tipping Counts: %lu", Sensor.getRawData());
   b4972:	4e36      	ldr	r6, [pc, #216]	; (b4a4c <loop+0xec>)
    Log.info("Sensor WorkingTime: %.2f H", Sensor.getSensorWorkingTime());
   b4974:	4628      	mov	r0, r5
   b4976:	f000 f995 	bl	b4ca4 <_ZN22DFRobot_RainfallSensor20getSensorWorkingTimeEv>
   b497a:	ee10 0a10 	vmov	r0, s0
   b497e:	f7ff fcb3 	bl	b42e8 <__aeabi_f2d>
   b4982:	4602      	mov	r2, r0
   b4984:	460b      	mov	r3, r1
   b4986:	4620      	mov	r0, r4
   b4988:	4649      	mov	r1, r9
   b498a:	f7ff ffaf 	bl	b48ec <_ZNK5spark6Logger4infoEPKcz>
    Log.info("Rainfall: %.2f mm", Sensor.getRainfall());
   b498e:	4628      	mov	r0, r5
   b4990:	f000 f902 	bl	b4b98 <_ZN22DFRobot_RainfallSensor11getRainfallEv>
   b4994:	ee10 0a10 	vmov	r0, s0
   b4998:	f7ff fca6 	bl	b42e8 <__aeabi_f2d>
   b499c:	4602      	mov	r2, r0
   b499e:	460b      	mov	r3, r1
   b49a0:	4620      	mov	r0, r4
   b49a2:	4641      	mov	r1, r8
   b49a4:	f7ff ffa2 	bl	b48ec <_ZNK5spark6Logger4infoEPKcz>
    Log.info("1 Hour Rainfall: %.2f mm", Sensor.getRainfall(1));
   b49a8:	4628      	mov	r0, r5
   b49aa:	2101      	movs	r1, #1
   b49ac:	f000 f920 	bl	b4bf0 <_ZN22DFRobot_RainfallSensor11getRainfallEh>
   b49b0:	ee10 0a10 	vmov	r0, s0
   b49b4:	f7ff fc98 	bl	b42e8 <__aeabi_f2d>
   b49b8:	460b      	mov	r3, r1
   b49ba:	4602      	mov	r2, r0
   b49bc:	4639      	mov	r1, r7
   b49be:	4620      	mov	r0, r4
   b49c0:	f7ff ff94 	bl	b48ec <_ZNK5spark6Logger4infoEPKcz>
    Log.info("Raw Tipping Counts: %lu", Sensor.getRawData());
   b49c4:	4628      	mov	r0, r5
   b49c6:	f000 f953 	bl	b4c70 <_ZN22DFRobot_RainfallSensor10getRawDataEv>
   b49ca:	4631      	mov	r1, r6
   b49cc:	4602      	mov	r2, r0
   b49ce:	4620      	mov	r0, r4
   b49d0:	f7ff ff8c 	bl	b48ec <_ZNK5spark6Logger4infoEPKcz>

    // Also print via USB for debugging
    Log.info("Sensor WorkingTime: %.2f H", Sensor.getSensorWorkingTime());
   b49d4:	4628      	mov	r0, r5
   b49d6:	f000 f965 	bl	b4ca4 <_ZN22DFRobot_RainfallSensor20getSensorWorkingTimeEv>
   b49da:	ee10 0a10 	vmov	r0, s0
   b49de:	f7ff fc83 	bl	b42e8 <__aeabi_f2d>
   b49e2:	4602      	mov	r2, r0
   b49e4:	460b      	mov	r3, r1
   b49e6:	4620      	mov	r0, r4
   b49e8:	4649      	mov	r1, r9
   b49ea:	f7ff ff7f 	bl	b48ec <_ZNK5spark6Logger4infoEPKcz>
    Log.info("Rainfall: %.2f mm", Sensor.getRainfall());
   b49ee:	4628      	mov	r0, r5
   b49f0:	f000 f8d2 	bl	b4b98 <_ZN22DFRobot_RainfallSensor11getRainfallEv>
   b49f4:	ee10 0a10 	vmov	r0, s0
   b49f8:	f7ff fc76 	bl	b42e8 <__aeabi_f2d>
   b49fc:	4602      	mov	r2, r0
   b49fe:	460b      	mov	r3, r1
   b4a00:	4620      	mov	r0, r4
   b4a02:	4641      	mov	r1, r8
   b4a04:	f7ff ff72 	bl	b48ec <_ZNK5spark6Logger4infoEPKcz>
    Log.info("1 Hour Rainfall: %.2f mm", Sensor.getRainfall(1));
   b4a08:	4628      	mov	r0, r5
   b4a0a:	2101      	movs	r1, #1
   b4a0c:	f000 f8f0 	bl	b4bf0 <_ZN22DFRobot_RainfallSensor11getRainfallEh>
   b4a10:	ee10 0a10 	vmov	r0, s0
   b4a14:	f7ff fc68 	bl	b42e8 <__aeabi_f2d>
   b4a18:	460b      	mov	r3, r1
   b4a1a:	4602      	mov	r2, r0
   b4a1c:	4639      	mov	r1, r7
   b4a1e:	4620      	mov	r0, r4
   b4a20:	f7ff ff64 	bl	b48ec <_ZNK5spark6Logger4infoEPKcz>
    Log.info("Raw Tipping Counts: %lu", Sensor.getRawData());
   b4a24:	4628      	mov	r0, r5
   b4a26:	f000 f923 	bl	b4c70 <_ZN22DFRobot_RainfallSensor10getRawDataEv>
   b4a2a:	4631      	mov	r1, r6
   b4a2c:	4602      	mov	r2, r0
   b4a2e:	4620      	mov	r0, r4
   b4a30:	f7ff ff5c 	bl	b48ec <_ZNK5spark6Logger4infoEPKcz>

    delay(1000);
}
   b4a34:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    delay(1000);
   b4a38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4a3c:	f000 bc58 	b.w	b52f0 <delay>
   b4a40:	2003def8 	.word	0x2003def8
   b4a44:	2003df44 	.word	0x2003df44
   b4a48:	000b5c42 	.word	0x000b5c42
   b4a4c:	000b5c5b 	.word	0x000b5c5b
   b4a50:	000b5c27 	.word	0x000b5c27
   b4a54:	000b5c49 	.word	0x000b5c49

000b4a58 <_GLOBAL__sub_I_Sensor>:
}
   b4a58:	b508      	push	{r3, lr}
DFRobot_RainfallSensor_I2C Sensor(&Wire);
   b4a5a:	f001 f861 	bl	b5b20 <_Z19__fetch_global_Wirev>
}
   b4a5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
DFRobot_RainfallSensor_I2C Sensor(&Wire);
   b4a62:	4601      	mov	r1, r0
   b4a64:	4801      	ldr	r0, [pc, #4]	; (b4a6c <_GLOBAL__sub_I_Sensor+0x14>)
   b4a66:	f000 b93d 	b.w	b4ce4 <_ZN26DFRobot_RainfallSensor_I2CC1EP7TwoWire>
   b4a6a:	bf00      	nop
   b4a6c:	2003def8 	.word	0x2003def8

000b4a70 <_ZN22DFRobot_RainfallSensor12readRegisterEt>:
     * @retval true:succeeded in getting the VID and PID
     * @retval false:failed to get the data or the data obtained is incorrect
     */
    bool getPidVid(void);
    virtual uint8_t readRegister(uint8_t reg,void* pBuf, size_t size){return 0;};
    virtual uint16_t readRegister(uint16_t reg){return 0;};
   b4a70:	2000      	movs	r0, #0
   b4a72:	4770      	bx	lr

000b4a74 <_ZN22DFRobot_RainfallSensor13writeRegisterEtt>:
    virtual uint8_t writeRegister(uint8_t reg,void* pBuf,size_t size){return 0;};
    virtual uint16_t writeRegister(uint16_t reg,uint16_t data){return 0;};
   b4a74:	2000      	movs	r0, #0
   b4a76:	4770      	bx	lr

000b4a78 <_ZN26DFRobot_RainfallSensor_I2C13writeRegisterEhPvj>:
  _pWire->begin();
  return DFRobot_RainfallSensor::begin();
}

uint8_t DFRobot_RainfallSensor_I2C::writeRegister(uint8_t reg, void* pBuf, size_t size)
{
   b4a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4a7a:	4604      	mov	r4, r0
   b4a7c:	460e      	mov	r6, r1
   b4a7e:	461f      	mov	r7, r3
  if(pBuf == NULL){
   b4a80:	4615      	mov	r5, r2
   b4a82:	b1da      	cbz	r2, b4abc <_ZN26DFRobot_RainfallSensor_I2C13writeRegisterEhPvj+0x44>
	  return 1;
  }
  uint8_t * _pBuf = (uint8_t *)pBuf;
  _pWire->beginTransmission(_deviceAddr);
   b4a84:	7e01      	ldrb	r1, [r0, #24]
   b4a86:	6940      	ldr	r0, [r0, #20]
   b4a88:	f000 fef6 	bl	b5878 <_ZN7TwoWire17beginTransmissionEh>
  _pWire->write(reg);
   b4a8c:	6960      	ldr	r0, [r4, #20]
   b4a8e:	6803      	ldr	r3, [r0, #0]
   b4a90:	4631      	mov	r1, r6
   b4a92:	689b      	ldr	r3, [r3, #8]
   b4a94:	4798      	blx	r3
   b4a96:	2600      	movs	r6, #0
  for( uint16_t i = 0; i < size; i++ ){
   b4a98:	b2b3      	uxth	r3, r6
   b4a9a:	429f      	cmp	r7, r3
    _pWire->write(_pBuf[i]);
   b4a9c:	6960      	ldr	r0, [r4, #20]
  for( uint16_t i = 0; i < size; i++ ){
   b4a9e:	f106 0601 	add.w	r6, r6, #1
   b4aa2:	d904      	bls.n	b4aae <_ZN26DFRobot_RainfallSensor_I2C13writeRegisterEhPvj+0x36>
    _pWire->write(_pBuf[i]);
   b4aa4:	6802      	ldr	r2, [r0, #0]
   b4aa6:	5ce9      	ldrb	r1, [r5, r3]
   b4aa8:	6892      	ldr	r2, [r2, #8]
   b4aaa:	4790      	blx	r2
  for( uint16_t i = 0; i < size; i++ ){
   b4aac:	e7f4      	b.n	b4a98 <_ZN26DFRobot_RainfallSensor_I2C13writeRegisterEhPvj+0x20>
  }
  _pWire->endTransmission();
   b4aae:	f000 feeb 	bl	b5888 <_ZN7TwoWire15endTransmissionEv>
  delay(100);
   b4ab2:	2064      	movs	r0, #100	; 0x64
   b4ab4:	f000 fc1c 	bl	b52f0 <delay>
   b4ab8:	2000      	movs	r0, #0
  return 0;
}
   b4aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  return 1;
   b4abc:	2001      	movs	r0, #1
   b4abe:	e7fc      	b.n	b4aba <_ZN26DFRobot_RainfallSensor_I2C13writeRegisterEhPvj+0x42>

000b4ac0 <_ZN26DFRobot_RainfallSensor_I2C12readRegisterEhPvj>:

uint8_t DFRobot_RainfallSensor_I2C::readRegister(uint8_t reg, void* pBuf, size_t size)
{
   b4ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4ac4:	4604      	mov	r4, r0
   b4ac6:	460d      	mov	r5, r1
   b4ac8:	461f      	mov	r7, r3
  if(pBuf == NULL){
   b4aca:	4616      	mov	r6, r2
   b4acc:	b30a      	cbz	r2, b4b12 <_ZN26DFRobot_RainfallSensor_I2C12readRegisterEhPvj+0x52>
    return 0;
  }
  uint8_t * _pBuf = (uint8_t *)pBuf;
  _pWire->beginTransmission(_deviceAddr);
   b4ace:	7e01      	ldrb	r1, [r0, #24]
   b4ad0:	6940      	ldr	r0, [r0, #20]
   b4ad2:	f000 fed1 	bl	b5878 <_ZN7TwoWire17beginTransmissionEh>
  _pWire->write(reg);
   b4ad6:	6960      	ldr	r0, [r4, #20]
   b4ad8:	6803      	ldr	r3, [r0, #0]
   b4ada:	4629      	mov	r1, r5
   b4adc:	689b      	ldr	r3, [r3, #8]
   b4ade:	4798      	blx	r3
  if(_pWire->endTransmission() != 0 ){
   b4ae0:	6960      	ldr	r0, [r4, #20]
   b4ae2:	f000 fed1 	bl	b5888 <_ZN7TwoWire15endTransmissionEv>
   b4ae6:	4605      	mov	r5, r0
   b4ae8:	b998      	cbnz	r0, b4b12 <_ZN26DFRobot_RainfallSensor_I2C12readRegisterEhPvj+0x52>
    return 0;
  }
  _pWire->requestFrom(_deviceAddr, (uint8_t)size );
   b4aea:	fa5f f887 	uxtb.w	r8, r7
   b4aee:	7e21      	ldrb	r1, [r4, #24]
   b4af0:	6960      	ldr	r0, [r4, #20]
   b4af2:	4642      	mov	r2, r8
   b4af4:	f000 febd 	bl	b5872 <_ZN7TwoWire11requestFromEhj>
  for( uint8_t i=0; i<size; i++ ){
   b4af8:	fa5f f985 	uxtb.w	r9, r5
   b4afc:	454f      	cmp	r7, r9
   b4afe:	f105 0501 	add.w	r5, r5, #1
   b4b02:	d908      	bls.n	b4b16 <_ZN26DFRobot_RainfallSensor_I2C12readRegisterEhPvj+0x56>
    _pBuf[i] = _pWire->read();
   b4b04:	6960      	ldr	r0, [r4, #20]
   b4b06:	6803      	ldr	r3, [r0, #0]
   b4b08:	695b      	ldr	r3, [r3, #20]
   b4b0a:	4798      	blx	r3
   b4b0c:	f806 0009 	strb.w	r0, [r6, r9]
  for( uint8_t i=0; i<size; i++ ){
   b4b10:	e7f2      	b.n	b4af8 <_ZN26DFRobot_RainfallSensor_I2C12readRegisterEhPvj+0x38>
    return 0;
   b4b12:	f04f 0800 	mov.w	r8, #0
  }
  return size;
   b4b16:	4640      	mov	r0, r8
   b4b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b4b1c <_ZN22DFRobot_RainfallSensor9getPidVidEv>:
{
   b4b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if( _mode == IIC_MODE ){
   b4b1e:	7c01      	ldrb	r1, [r0, #16]
    readRegister( I2C_REG_PID, (void*)buff, 4 );
   b4b20:	6803      	ldr	r3, [r0, #0]
{
   b4b22:	4604      	mov	r4, r0
  if( _mode == IIC_MODE ){
   b4b24:	bb09      	cbnz	r1, b4b6a <_ZN22DFRobot_RainfallSensor9getPidVidEv+0x4e>
    uint8_t buff[4] = {0};
   b4b26:	9101      	str	r1, [sp, #4]
    readRegister( I2C_REG_PID, (void*)buff, 4 );
   b4b28:	681d      	ldr	r5, [r3, #0]
   b4b2a:	2304      	movs	r3, #4
   b4b2c:	eb0d 0203 	add.w	r2, sp, r3
   b4b30:	47a8      	blx	r5
    pid = buff[0] | ( ( (uint16_t)buff[1] ) << 8 ) | ( ( (uint32_t)( buff[3] & 0xC0 ) ) << 10 );
   b4b32:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b4b36:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   b4b3a:	029a      	lsls	r2, r3, #10
   b4b3c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
   b4b40:	430a      	orrs	r2, r1
   b4b42:	60a2      	str	r2, [r4, #8]
    vid = buff[2] | (uint16_t)( ( buff[3] & 0x3F ) << 8 );
   b4b44:	021b      	lsls	r3, r3, #8
   b4b46:	f89d 2006 	ldrb.w	r2, [sp, #6]
   b4b4a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   b4b4e:	4313      	orrs	r3, r2
   b4b50:	6063      	str	r3, [r4, #4]
  if( ( vid == 0x3343 ) && ( pid == 0x100C0 ) ){
   b4b52:	6862      	ldr	r2, [r4, #4]
   b4b54:	f243 3343 	movw	r3, #13123	; 0x3343
   b4b58:	429a      	cmp	r2, r3
   b4b5a:	d119      	bne.n	b4b90 <_ZN22DFRobot_RainfallSensor9getPidVidEv+0x74>
   b4b5c:	68a0      	ldr	r0, [r4, #8]
   b4b5e:	4b0d      	ldr	r3, [pc, #52]	; (b4b94 <_ZN22DFRobot_RainfallSensor9getPidVidEv+0x78>)
   b4b60:	1ac3      	subs	r3, r0, r3
   b4b62:	4258      	negs	r0, r3
   b4b64:	4158      	adcs	r0, r3
}
   b4b66:	b003      	add	sp, #12
   b4b68:	bd30      	pop	{r4, r5, pc}
    pid = readRegister( eInputRegPidSEN0575 );
   b4b6a:	685b      	ldr	r3, [r3, #4]
   b4b6c:	2100      	movs	r1, #0
   b4b6e:	4798      	blx	r3
    vid = readRegister( eInputRegVidSEN0575 );
   b4b70:	6823      	ldr	r3, [r4, #0]
    pid = readRegister( eInputRegPidSEN0575 );
   b4b72:	60a0      	str	r0, [r4, #8]
    vid = readRegister( eInputRegVidSEN0575 );
   b4b74:	685b      	ldr	r3, [r3, #4]
   b4b76:	2101      	movs	r1, #1
   b4b78:	4620      	mov	r0, r4
   b4b7a:	4798      	blx	r3
    pid = ( vid & 0xC000 ) << 2 | pid;
   b4b7c:	0083      	lsls	r3, r0, #2
   b4b7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
   b4b82:	68a3      	ldr	r3, [r4, #8]
    vid = vid & 0x3FFF;
   b4b84:	f3c0 000d 	ubfx	r0, r0, #0, #14
    pid = ( vid & 0xC000 ) << 2 | pid;
   b4b88:	4313      	orrs	r3, r2
   b4b8a:	60a3      	str	r3, [r4, #8]
    vid = vid & 0x3FFF;
   b4b8c:	6060      	str	r0, [r4, #4]
   b4b8e:	e7e0      	b.n	b4b52 <_ZN22DFRobot_RainfallSensor9getPidVidEv+0x36>
  bool ret = false;
   b4b90:	2000      	movs	r0, #0
   b4b92:	e7e8      	b.n	b4b66 <_ZN22DFRobot_RainfallSensor9getPidVidEv+0x4a>
   b4b94:	000100c0 	.word	0x000100c0

000b4b98 <_ZN22DFRobot_RainfallSensor11getRainfallEv>:
{
   b4b98:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(_mode == IIC_MODE){
   b4b9a:	7c02      	ldrb	r2, [r0, #16]
    readRegister( I2C_REG_CUMULATIVE_RAINFALL, (void*)buff, 4 );
   b4b9c:	6803      	ldr	r3, [r0, #0]
{
   b4b9e:	4604      	mov	r4, r0
  if(_mode == IIC_MODE){
   b4ba0:	b9a2      	cbnz	r2, b4bcc <_ZN22DFRobot_RainfallSensor11getRainfallEv+0x34>
    uint8_t buff[4]={0};
   b4ba2:	9201      	str	r2, [sp, #4]
    readRegister( I2C_REG_CUMULATIVE_RAINFALL, (void*)buff, 4 );
   b4ba4:	681c      	ldr	r4, [r3, #0]
   b4ba6:	2304      	movs	r3, #4
   b4ba8:	eb0d 0203 	add.w	r2, sp, r3
   b4bac:	2110      	movs	r1, #16
   b4bae:	47a0      	blx	r4
    rainfall = buff[0] | ( ( (uint32_t)buff[1] ) << 8 ) | ( ( (uint32_t)buff[2] ) << 16 ) | ( ( (uint32_t)buff[3]) << 24 );
   b4bb0:	9801      	ldr	r0, [sp, #4]
  return rainfall / 10000.0;
   b4bb2:	f7ff fb77 	bl	b42a4 <__aeabi_ui2d>
   b4bb6:	a30c      	add	r3, pc, #48	; (adr r3, b4be8 <_ZN22DFRobot_RainfallSensor11getRainfallEv+0x50>)
   b4bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4bbc:	f7ff fd16 	bl	b45ec <__aeabi_ddiv>
   b4bc0:	f7ff fdfc 	bl	b47bc <__aeabi_d2f>
}
   b4bc4:	ee00 0a10 	vmov	s0, r0
   b4bc8:	b003      	add	sp, #12
   b4bca:	bd30      	pop	{r4, r5, pc}
    rainfall = readRegister( eInputRegCumulativeRainFallHSEN0575 );
   b4bcc:	685b      	ldr	r3, [r3, #4]
   b4bce:	2109      	movs	r1, #9
   b4bd0:	4798      	blx	r3
    rainfall = rainfall << 16 | readRegister( eInputRegCumulativeRainFallLSEN0575 );
   b4bd2:	6823      	ldr	r3, [r4, #0]
   b4bd4:	0405      	lsls	r5, r0, #16
   b4bd6:	685b      	ldr	r3, [r3, #4]
   b4bd8:	2108      	movs	r1, #8
   b4bda:	4620      	mov	r0, r4
   b4bdc:	4798      	blx	r3
   b4bde:	4328      	orrs	r0, r5
   b4be0:	e7e7      	b.n	b4bb2 <_ZN22DFRobot_RainfallSensor11getRainfallEv+0x1a>
   b4be2:	bf00      	nop
   b4be4:	f3af 8000 	nop.w
   b4be8:	00000000 	.word	0x00000000
   b4bec:	40c38800 	.word	0x40c38800

000b4bf0 <_ZN22DFRobot_RainfallSensor11getRainfallEh>:
{
   b4bf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if(_mode == IIC_MODE){
   b4bf2:	7c05      	ldrb	r5, [r0, #16]
    writeRegister(I2C_REG_RAIN_HOUR, (void*)&hour, 1);
   b4bf4:	6803      	ldr	r3, [r0, #0]
{
   b4bf6:	f88d 1007 	strb.w	r1, [sp, #7]
   b4bfa:	4604      	mov	r4, r0
  if(_mode == IIC_MODE){
   b4bfc:	b9fd      	cbnz	r5, b4c3e <_ZN22DFRobot_RainfallSensor11getRainfallEh+0x4e>
    writeRegister(I2C_REG_RAIN_HOUR, (void*)&hour, 1);
   b4bfe:	689e      	ldr	r6, [r3, #8]
   b4c00:	f10d 0207 	add.w	r2, sp, #7
   b4c04:	2301      	movs	r3, #1
   b4c06:	2126      	movs	r1, #38	; 0x26
   b4c08:	47b0      	blx	r6
    if( readRegister(I2C_REG_TIME_RAINFALL, (void*)buff, 4 ) == 0 ){
   b4c0a:	6823      	ldr	r3, [r4, #0]
    uint8_t buff[4] = {0};
   b4c0c:	9503      	str	r5, [sp, #12]
    if( readRegister(I2C_REG_TIME_RAINFALL, (void*)buff, 4 ) == 0 ){
   b4c0e:	681d      	ldr	r5, [r3, #0]
   b4c10:	aa03      	add	r2, sp, #12
   b4c12:	2304      	movs	r3, #4
   b4c14:	210c      	movs	r1, #12
   b4c16:	4620      	mov	r0, r4
   b4c18:	47a8      	blx	r5
   b4c1a:	b918      	cbnz	r0, b4c24 <_ZN22DFRobot_RainfallSensor11getRainfallEh+0x34>
      return -1;
   b4c1c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b4c20:	b004      	add	sp, #16
   b4c22:	bd70      	pop	{r4, r5, r6, pc}
    rainfall = buff[0] | ( ( (uint32_t)buff[1] ) << 8 ) | ( ( (uint32_t)buff[2]) << 16 ) | ( ( (uint32_t)buff[3] ) << 24 );
   b4c24:	9803      	ldr	r0, [sp, #12]
  return rainfall / 10000.0;
   b4c26:	f7ff fb3d 	bl	b42a4 <__aeabi_ui2d>
   b4c2a:	a30f      	add	r3, pc, #60	; (adr r3, b4c68 <_ZN22DFRobot_RainfallSensor11getRainfallEh+0x78>)
   b4c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c30:	f7ff fcdc 	bl	b45ec <__aeabi_ddiv>
   b4c34:	f7ff fdc2 	bl	b47bc <__aeabi_d2f>
   b4c38:	ee00 0a10 	vmov	s0, r0
   b4c3c:	e7f0      	b.n	b4c20 <_ZN22DFRobot_RainfallSensor11getRainfallEh+0x30>
    writeRegister( eHoldingRegRainHourSEN0575, hour );
   b4c3e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   b4c42:	68db      	ldr	r3, [r3, #12]
   b4c44:	2106      	movs	r1, #6
   b4c46:	4798      	blx	r3
    rainfall = readRegister( eInputRegTimeRainFallHSEN0575 );
   b4c48:	6823      	ldr	r3, [r4, #0]
   b4c4a:	2107      	movs	r1, #7
   b4c4c:	685b      	ldr	r3, [r3, #4]
   b4c4e:	4620      	mov	r0, r4
   b4c50:	4798      	blx	r3
    rainfall = rainfall << 16 | readRegister( eInputRegTimeRainFallLSEN0575 );
   b4c52:	6823      	ldr	r3, [r4, #0]
   b4c54:	0405      	lsls	r5, r0, #16
   b4c56:	685b      	ldr	r3, [r3, #4]
   b4c58:	2106      	movs	r1, #6
   b4c5a:	4620      	mov	r0, r4
   b4c5c:	4798      	blx	r3
   b4c5e:	4328      	orrs	r0, r5
   b4c60:	e7e1      	b.n	b4c26 <_ZN22DFRobot_RainfallSensor11getRainfallEh+0x36>
   b4c62:	bf00      	nop
   b4c64:	f3af 8000 	nop.w
   b4c68:	00000000 	.word	0x00000000
   b4c6c:	40c38800 	.word	0x40c38800

000b4c70 <_ZN22DFRobot_RainfallSensor10getRawDataEv>:
{
   b4c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(_mode == IIC_MODE){
   b4c72:	7c02      	ldrb	r2, [r0, #16]
    readRegister( I2C_REG_RAW_DATA, (void*)buff, 4 );
   b4c74:	6803      	ldr	r3, [r0, #0]
{
   b4c76:	4604      	mov	r4, r0
  if(_mode == IIC_MODE){
   b4c78:	b94a      	cbnz	r2, b4c8e <_ZN22DFRobot_RainfallSensor10getRawDataEv+0x1e>
    uint8_t buff[4] = { 0 };
   b4c7a:	9201      	str	r2, [sp, #4]
    readRegister( I2C_REG_RAW_DATA, (void*)buff, 4 );
   b4c7c:	681c      	ldr	r4, [r3, #0]
   b4c7e:	2304      	movs	r3, #4
   b4c80:	eb0d 0203 	add.w	r2, sp, r3
   b4c84:	2114      	movs	r1, #20
   b4c86:	47a0      	blx	r4
    rawdata = buff[0] | ( ( (uint32_t)buff[1] ) << 8 ) | ( ( (uint32_t)buff[2] ) << 16 ) | ( ( (uint32_t)buff[3]) << 24 );
   b4c88:	9801      	ldr	r0, [sp, #4]
}
   b4c8a:	b003      	add	sp, #12
   b4c8c:	bd30      	pop	{r4, r5, pc}
    rawdata = readRegister( eInputRegRawDataHSEN0575 );
   b4c8e:	685b      	ldr	r3, [r3, #4]
   b4c90:	210b      	movs	r1, #11
   b4c92:	4798      	blx	r3
    rawdata = rawdata << 16 | readRegister( eInputRegRawDataLSEN0575 );
   b4c94:	6823      	ldr	r3, [r4, #0]
   b4c96:	0405      	lsls	r5, r0, #16
   b4c98:	685b      	ldr	r3, [r3, #4]
   b4c9a:	210a      	movs	r1, #10
   b4c9c:	4620      	mov	r0, r4
   b4c9e:	4798      	blx	r3
   b4ca0:	4328      	orrs	r0, r5
  return rawdata;
   b4ca2:	e7f2      	b.n	b4c8a <_ZN22DFRobot_RainfallSensor10getRawDataEv+0x1a>

000b4ca4 <_ZN22DFRobot_RainfallSensor20getSensorWorkingTimeEv>:
{
   b4ca4:	b513      	push	{r0, r1, r4, lr}
  if(_mode == IIC_MODE){
   b4ca6:	7c03      	ldrb	r3, [r0, #16]
    readRegister( I2C_REG_SYS_TIME, (void*)buff, 2 );
   b4ca8:	6802      	ldr	r2, [r0, #0]
  if(_mode == IIC_MODE){
   b4caa:	b9a3      	cbnz	r3, b4cd6 <_ZN22DFRobot_RainfallSensor20getSensorWorkingTimeEv+0x32>
    uint8_t buff[2] = { 0 };
   b4cac:	f8ad 3004 	strh.w	r3, [sp, #4]
    readRegister( I2C_REG_SYS_TIME, (void*)buff, 2 );
   b4cb0:	6814      	ldr	r4, [r2, #0]
   b4cb2:	2302      	movs	r3, #2
   b4cb4:	aa01      	add	r2, sp, #4
   b4cb6:	2118      	movs	r1, #24
   b4cb8:	47a0      	blx	r4
    WorkingTime = buff[0] | ( ( (uint32_t)buff[1] ) << 8 );
   b4cba:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  return WorkingTime / 60.0;
   b4cbe:	f7ff fb01 	bl	b42c4 <__aeabi_i2d>
   b4cc2:	4b07      	ldr	r3, [pc, #28]	; (b4ce0 <_ZN22DFRobot_RainfallSensor20getSensorWorkingTimeEv+0x3c>)
   b4cc4:	2200      	movs	r2, #0
   b4cc6:	f7ff fc91 	bl	b45ec <__aeabi_ddiv>
   b4cca:	f7ff fd77 	bl	b47bc <__aeabi_d2f>
}
   b4cce:	ee00 0a10 	vmov	s0, r0
   b4cd2:	b002      	add	sp, #8
   b4cd4:	bd10      	pop	{r4, pc}
    WorkingTime = readRegister( eInputRegSysWorkingTimeSEN0575 );
   b4cd6:	6853      	ldr	r3, [r2, #4]
   b4cd8:	210c      	movs	r1, #12
   b4cda:	4798      	blx	r3
   b4cdc:	e7ef      	b.n	b4cbe <_ZN22DFRobot_RainfallSensor20getSensorWorkingTimeEv+0x1a>
   b4cde:	bf00      	nop
   b4ce0:	404e0000 	.word	0x404e0000

000b4ce4 <_ZN26DFRobot_RainfallSensor_I2CC1EP7TwoWire>:
  _mode = mode;
   b4ce4:	2200      	movs	r2, #0
  vid = 0;
   b4ce6:	e9c0 2201 	strd	r2, r2, [r0, #4]
  _mode = mode;
   b4cea:	7402      	strb	r2, [r0, #16]
:DFRobot_RainfallSensor(IIC_MODE),_pWire(pWire)
   b4cec:	4a02      	ldr	r2, [pc, #8]	; (b4cf8 <_ZN26DFRobot_RainfallSensor_I2CC1EP7TwoWire+0x14>)
   b4cee:	6002      	str	r2, [r0, #0]
  _deviceAddr = 0x1D;
   b4cf0:	221d      	movs	r2, #29
:DFRobot_RainfallSensor(IIC_MODE),_pWire(pWire)
   b4cf2:	6141      	str	r1, [r0, #20]
  _deviceAddr = 0x1D;
   b4cf4:	7602      	strb	r2, [r0, #24]
}
   b4cf6:	4770      	bx	lr
   b4cf8:	000b5c7c 	.word	0x000b5c7c

000b4cfc <_ZN26DFRobot_RainfallSensor_I2C5beginEv>:
{
   b4cfc:	b510      	push	{r4, lr}
   b4cfe:	4604      	mov	r4, r0
  _pWire->begin();
   b4d00:	6940      	ldr	r0, [r0, #20]
   b4d02:	f000 fd83 	bl	b580c <_ZN7TwoWire5beginEv>
  return getPidVid();
   b4d06:	4620      	mov	r0, r4
}
   b4d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getPidVid();
   b4d0c:	f7ff bf06 	b.w	b4b1c <_ZN22DFRobot_RainfallSensor9getPidVidEv>

000b4d10 <_ZN5Print5writeEPKc>:

    int getWriteError() const { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4d10:	b513      	push	{r0, r1, r4, lr}
   b4d12:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4d14:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4d16:	b159      	cbz	r1, b4d30 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4d18:	9101      	str	r1, [sp, #4]
   b4d1a:	f7ff fd9f 	bl	b485c <strlen>
   b4d1e:	6823      	ldr	r3, [r4, #0]
   b4d20:	9901      	ldr	r1, [sp, #4]
   b4d22:	68db      	ldr	r3, [r3, #12]
   b4d24:	4602      	mov	r2, r0
   b4d26:	4620      	mov	r0, r4
    }
   b4d28:	b002      	add	sp, #8
   b4d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4d2e:	4718      	bx	r3
    }
   b4d30:	b002      	add	sp, #8
   b4d32:	bd10      	pop	{r4, pc}

000b4d34 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4d34:	b508      	push	{r3, lr}
   b4d36:	4b02      	ldr	r3, [pc, #8]	; (b4d40 <netdb_freeaddrinfo+0xc>)
   b4d38:	681b      	ldr	r3, [r3, #0]
   b4d3a:	689b      	ldr	r3, [r3, #8]
   b4d3c:	9301      	str	r3, [sp, #4]
   b4d3e:	bd08      	pop	{r3, pc}
   b4d40:	00030268 	.word	0x00030268

000b4d44 <netdb_getaddrinfo_ex>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
DYNALIB_FN(4, hal_netdb, netdb_getnameinfo, int(const struct sockaddr*, socklen_t, char*, socklen_t, char*, socklen_t, int))
DYNALIB_FN(5, hal_netdb, netdb_getaddrinfo_ex, int(const char*, const char*, const struct addrinfo*, struct addrinfo**, if_t))
   b4d44:	b508      	push	{r3, lr}
   b4d46:	4b02      	ldr	r3, [pc, #8]	; (b4d50 <netdb_getaddrinfo_ex+0xc>)
   b4d48:	681b      	ldr	r3, [r3, #0]
   b4d4a:	695b      	ldr	r3, [r3, #20]
   b4d4c:	9301      	str	r3, [sp, #4]
   b4d4e:	bd08      	pop	{r3, pc}
   b4d50:	00030268 	.word	0x00030268

000b4d54 <if_get_by_index>:
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   b4d54:	b508      	push	{r3, lr}
   b4d56:	4b02      	ldr	r3, [pc, #8]	; (b4d60 <if_get_by_index+0xc>)
   b4d58:	681b      	ldr	r3, [r3, #0]
   b4d5a:	699b      	ldr	r3, [r3, #24]
   b4d5c:	9301      	str	r3, [sp, #4]
   b4d5e:	bd08      	pop	{r3, pc}
   b4d60:	0003026c 	.word	0x0003026c

000b4d64 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4d64:	b508      	push	{r3, lr}
   b4d66:	4b02      	ldr	r3, [pc, #8]	; (b4d70 <HAL_RNG_GetRandomNumber+0xc>)
   b4d68:	681b      	ldr	r3, [r3, #0]
   b4d6a:	685b      	ldr	r3, [r3, #4]
   b4d6c:	9301      	str	r3, [sp, #4]
   b4d6e:	bd08      	pop	{r3, pc}
   b4d70:	00030218 	.word	0x00030218

000b4d74 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4d74:	b508      	push	{r3, lr}
   b4d76:	4b02      	ldr	r3, [pc, #8]	; (b4d80 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4d78:	681b      	ldr	r3, [r3, #0]
   b4d7a:	695b      	ldr	r3, [r3, #20]
   b4d7c:	9301      	str	r3, [sp, #4]
   b4d7e:	bd08      	pop	{r3, pc}
   b4d80:	00030218 	.word	0x00030218

000b4d84 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4d84:	b508      	push	{r3, lr}
   b4d86:	4b02      	ldr	r3, [pc, #8]	; (b4d90 <os_mutex_recursive_create+0xc>)
   b4d88:	681b      	ldr	r3, [r3, #0]
   b4d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d8c:	9301      	str	r3, [sp, #4]
   b4d8e:	bd08      	pop	{r3, pc}
   b4d90:	00030248 	.word	0x00030248

000b4d94 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4d94:	b508      	push	{r3, lr}
   b4d96:	4b02      	ldr	r3, [pc, #8]	; (b4da0 <inet_inet_ntop+0xc>)
   b4d98:	681b      	ldr	r3, [r3, #0]
   b4d9a:	695b      	ldr	r3, [r3, #20]
   b4d9c:	9301      	str	r3, [sp, #4]
   b4d9e:	bd08      	pop	{r3, pc}
   b4da0:	00030264 	.word	0x00030264

000b4da4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4da4:	b508      	push	{r3, lr}
   b4da6:	4b02      	ldr	r3, [pc, #8]	; (b4db0 <hal_usart_write+0xc>)
   b4da8:	681b      	ldr	r3, [r3, #0]
   b4daa:	68db      	ldr	r3, [r3, #12]
   b4dac:	9301      	str	r3, [sp, #4]
   b4dae:	bd08      	pop	{r3, pc}
   b4db0:	0003023c 	.word	0x0003023c

000b4db4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4db4:	b508      	push	{r3, lr}
   b4db6:	4b02      	ldr	r3, [pc, #8]	; (b4dc0 <hal_usart_available+0xc>)
   b4db8:	681b      	ldr	r3, [r3, #0]
   b4dba:	691b      	ldr	r3, [r3, #16]
   b4dbc:	9301      	str	r3, [sp, #4]
   b4dbe:	bd08      	pop	{r3, pc}
   b4dc0:	0003023c 	.word	0x0003023c

000b4dc4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4dc4:	b508      	push	{r3, lr}
   b4dc6:	4b02      	ldr	r3, [pc, #8]	; (b4dd0 <hal_usart_read+0xc>)
   b4dc8:	681b      	ldr	r3, [r3, #0]
   b4dca:	695b      	ldr	r3, [r3, #20]
   b4dcc:	9301      	str	r3, [sp, #4]
   b4dce:	bd08      	pop	{r3, pc}
   b4dd0:	0003023c 	.word	0x0003023c

000b4dd4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4dd4:	b508      	push	{r3, lr}
   b4dd6:	4b02      	ldr	r3, [pc, #8]	; (b4de0 <hal_usart_peek+0xc>)
   b4dd8:	681b      	ldr	r3, [r3, #0]
   b4dda:	699b      	ldr	r3, [r3, #24]
   b4ddc:	9301      	str	r3, [sp, #4]
   b4dde:	bd08      	pop	{r3, pc}
   b4de0:	0003023c 	.word	0x0003023c

000b4de4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4de4:	b508      	push	{r3, lr}
   b4de6:	4b02      	ldr	r3, [pc, #8]	; (b4df0 <hal_usart_flush+0xc>)
   b4de8:	681b      	ldr	r3, [r3, #0]
   b4dea:	69db      	ldr	r3, [r3, #28]
   b4dec:	9301      	str	r3, [sp, #4]
   b4dee:	bd08      	pop	{r3, pc}
   b4df0:	0003023c 	.word	0x0003023c

000b4df4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4df4:	b508      	push	{r3, lr}
   b4df6:	4b02      	ldr	r3, [pc, #8]	; (b4e00 <hal_usart_available_data_for_write+0xc>)
   b4df8:	681b      	ldr	r3, [r3, #0]
   b4dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4dfc:	9301      	str	r3, [sp, #4]
   b4dfe:	bd08      	pop	{r3, pc}
   b4e00:	0003023c 	.word	0x0003023c

000b4e04 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4e04:	b508      	push	{r3, lr}
   b4e06:	4b02      	ldr	r3, [pc, #8]	; (b4e10 <hal_usart_begin_config+0xc>)
   b4e08:	681b      	ldr	r3, [r3, #0]
   b4e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e0c:	9301      	str	r3, [sp, #4]
   b4e0e:	bd08      	pop	{r3, pc}
   b4e10:	0003023c 	.word	0x0003023c

000b4e14 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4e14:	b508      	push	{r3, lr}
   b4e16:	4b02      	ldr	r3, [pc, #8]	; (b4e20 <hal_usart_init_ex+0xc>)
   b4e18:	681b      	ldr	r3, [r3, #0]
   b4e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e1c:	9301      	str	r3, [sp, #4]
   b4e1e:	bd08      	pop	{r3, pc}
   b4e20:	0003023c 	.word	0x0003023c

000b4e24 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4e24:	b508      	push	{r3, lr}
   b4e26:	4b02      	ldr	r3, [pc, #8]	; (b4e30 <hal_i2c_begin+0xc>)
   b4e28:	681b      	ldr	r3, [r3, #0]
   b4e2a:	68db      	ldr	r3, [r3, #12]
   b4e2c:	9301      	str	r3, [sp, #4]
   b4e2e:	bd08      	pop	{r3, pc}
   b4e30:	00030228 	.word	0x00030228

000b4e34 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4e34:	b508      	push	{r3, lr}
   b4e36:	4b02      	ldr	r3, [pc, #8]	; (b4e40 <hal_i2c_begin_transmission+0xc>)
   b4e38:	681b      	ldr	r3, [r3, #0]
   b4e3a:	699b      	ldr	r3, [r3, #24]
   b4e3c:	9301      	str	r3, [sp, #4]
   b4e3e:	bd08      	pop	{r3, pc}
   b4e40:	00030228 	.word	0x00030228

000b4e44 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4e44:	b508      	push	{r3, lr}
   b4e46:	4b02      	ldr	r3, [pc, #8]	; (b4e50 <hal_i2c_end_transmission+0xc>)
   b4e48:	681b      	ldr	r3, [r3, #0]
   b4e4a:	69db      	ldr	r3, [r3, #28]
   b4e4c:	9301      	str	r3, [sp, #4]
   b4e4e:	bd08      	pop	{r3, pc}
   b4e50:	00030228 	.word	0x00030228

000b4e54 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4e54:	b508      	push	{r3, lr}
   b4e56:	4b02      	ldr	r3, [pc, #8]	; (b4e60 <hal_i2c_write+0xc>)
   b4e58:	681b      	ldr	r3, [r3, #0]
   b4e5a:	6a1b      	ldr	r3, [r3, #32]
   b4e5c:	9301      	str	r3, [sp, #4]
   b4e5e:	bd08      	pop	{r3, pc}
   b4e60:	00030228 	.word	0x00030228

000b4e64 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4e64:	b508      	push	{r3, lr}
   b4e66:	4b02      	ldr	r3, [pc, #8]	; (b4e70 <hal_i2c_available+0xc>)
   b4e68:	681b      	ldr	r3, [r3, #0]
   b4e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4e6c:	9301      	str	r3, [sp, #4]
   b4e6e:	bd08      	pop	{r3, pc}
   b4e70:	00030228 	.word	0x00030228

000b4e74 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4e74:	b508      	push	{r3, lr}
   b4e76:	4b02      	ldr	r3, [pc, #8]	; (b4e80 <hal_i2c_read+0xc>)
   b4e78:	681b      	ldr	r3, [r3, #0]
   b4e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4e7c:	9301      	str	r3, [sp, #4]
   b4e7e:	bd08      	pop	{r3, pc}
   b4e80:	00030228 	.word	0x00030228

000b4e84 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4e84:	b508      	push	{r3, lr}
   b4e86:	4b02      	ldr	r3, [pc, #8]	; (b4e90 <hal_i2c_peek+0xc>)
   b4e88:	681b      	ldr	r3, [r3, #0]
   b4e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e8c:	9301      	str	r3, [sp, #4]
   b4e8e:	bd08      	pop	{r3, pc}
   b4e90:	00030228 	.word	0x00030228

000b4e94 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4e94:	b508      	push	{r3, lr}
   b4e96:	4b02      	ldr	r3, [pc, #8]	; (b4ea0 <hal_i2c_flush+0xc>)
   b4e98:	681b      	ldr	r3, [r3, #0]
   b4e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4e9c:	9301      	str	r3, [sp, #4]
   b4e9e:	bd08      	pop	{r3, pc}
   b4ea0:	00030228 	.word	0x00030228

000b4ea4 <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4ea4:	b508      	push	{r3, lr}
   b4ea6:	4b02      	ldr	r3, [pc, #8]	; (b4eb0 <hal_i2c_init+0xc>)
   b4ea8:	681b      	ldr	r3, [r3, #0]
   b4eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4eac:	9301      	str	r3, [sp, #4]
   b4eae:	bd08      	pop	{r3, pc}
   b4eb0:	00030228 	.word	0x00030228

000b4eb4 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4eb4:	b508      	push	{r3, lr}
   b4eb6:	4b02      	ldr	r3, [pc, #8]	; (b4ec0 <hal_i2c_request_ex+0xc>)
   b4eb8:	681b      	ldr	r3, [r3, #0]
   b4eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4ebc:	9301      	str	r3, [sp, #4]
   b4ebe:	bd08      	pop	{r3, pc}
   b4ec0:	00030228 	.word	0x00030228

000b4ec4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4ec4:	b508      	push	{r3, lr}
   b4ec6:	4b02      	ldr	r3, [pc, #8]	; (b4ed0 <HAL_USB_USART_Init+0xc>)
   b4ec8:	681b      	ldr	r3, [r3, #0]
   b4eca:	681b      	ldr	r3, [r3, #0]
   b4ecc:	9301      	str	r3, [sp, #4]
   b4ece:	bd08      	pop	{r3, pc}
   b4ed0:	0003024c 	.word	0x0003024c

000b4ed4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
   b4ed4:	b508      	push	{r3, lr}
   b4ed6:	4b02      	ldr	r3, [pc, #8]	; (b4ee0 <HAL_USB_USART_Available_Data+0xc>)
   b4ed8:	681b      	ldr	r3, [r3, #0]
   b4eda:	691b      	ldr	r3, [r3, #16]
   b4edc:	9301      	str	r3, [sp, #4]
   b4ede:	bd08      	pop	{r3, pc}
   b4ee0:	0003024c 	.word	0x0003024c

000b4ee4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
   b4ee4:	b508      	push	{r3, lr}
   b4ee6:	4b02      	ldr	r3, [pc, #8]	; (b4ef0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4ee8:	681b      	ldr	r3, [r3, #0]
   b4eea:	695b      	ldr	r3, [r3, #20]
   b4eec:	9301      	str	r3, [sp, #4]
   b4eee:	bd08      	pop	{r3, pc}
   b4ef0:	0003024c 	.word	0x0003024c

000b4ef4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4ef4:	b508      	push	{r3, lr}
   b4ef6:	4b02      	ldr	r3, [pc, #8]	; (b4f00 <HAL_USB_USART_Receive_Data+0xc>)
   b4ef8:	681b      	ldr	r3, [r3, #0]
   b4efa:	699b      	ldr	r3, [r3, #24]
   b4efc:	9301      	str	r3, [sp, #4]
   b4efe:	bd08      	pop	{r3, pc}
   b4f00:	0003024c 	.word	0x0003024c

000b4f04 <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4f04:	b508      	push	{r3, lr}
   b4f06:	4b02      	ldr	r3, [pc, #8]	; (b4f10 <HAL_USB_USART_Send_Data+0xc>)
   b4f08:	681b      	ldr	r3, [r3, #0]
   b4f0a:	69db      	ldr	r3, [r3, #28]
   b4f0c:	9301      	str	r3, [sp, #4]
   b4f0e:	bd08      	pop	{r3, pc}
   b4f10:	0003024c 	.word	0x0003024c

000b4f14 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
   b4f14:	b508      	push	{r3, lr}
   b4f16:	4b02      	ldr	r3, [pc, #8]	; (b4f20 <HAL_USB_USART_Flush_Data+0xc>)
   b4f18:	681b      	ldr	r3, [r3, #0]
   b4f1a:	6a1b      	ldr	r3, [r3, #32]
   b4f1c:	9301      	str	r3, [sp, #4]
   b4f1e:	bd08      	pop	{r3, pc}
   b4f20:	0003024c 	.word	0x0003024c

000b4f24 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b4f24:	b508      	push	{r3, lr}
   b4f26:	4b02      	ldr	r3, [pc, #8]	; (b4f30 <log_message_v+0xc>)
   b4f28:	681b      	ldr	r3, [r3, #0]
   b4f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4f2c:	9301      	str	r3, [sp, #4]
   b4f2e:	bd08      	pop	{r3, pc}
   b4f30:	00030260 	.word	0x00030260

000b4f34 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4f34:	b508      	push	{r3, lr}
   b4f36:	4b02      	ldr	r3, [pc, #8]	; (b4f40 <set_system_mode+0xc>)
   b4f38:	681b      	ldr	r3, [r3, #0]
   b4f3a:	685b      	ldr	r3, [r3, #4]
   b4f3c:	9301      	str	r3, [sp, #4]
   b4f3e:	bd08      	pop	{r3, pc}
   b4f40:	00030220 	.word	0x00030220

000b4f44 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler_deprecated, void(void*))
DYNALIB_FN(3, system, system_firmwareUpdate_deprecated, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer_deprecated, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4f44:	b508      	push	{r3, lr}
   b4f46:	4b02      	ldr	r3, [pc, #8]	; (b4f50 <system_delay_ms+0xc>)
   b4f48:	681b      	ldr	r3, [r3, #0]
   b4f4a:	695b      	ldr	r3, [r3, #20]
   b4f4c:	9301      	str	r3, [sp, #4]
   b4f4e:	bd08      	pop	{r3, pc}
   b4f50:	00030220 	.word	0x00030220

000b4f54 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4f54:	b508      	push	{r3, lr}
   b4f56:	4b03      	ldr	r3, [pc, #12]	; (b4f64 <system_ctrl_set_app_request_handler+0x10>)
   b4f58:	681b      	ldr	r3, [r3, #0]
   b4f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4f5e:	9301      	str	r3, [sp, #4]
   b4f60:	bd08      	pop	{r3, pc}
   b4f62:	0000      	.short	0x0000
   b4f64:	00030220 	.word	0x00030220

000b4f68 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4f68:	b508      	push	{r3, lr}
   b4f6a:	4b03      	ldr	r3, [pc, #12]	; (b4f78 <system_ctrl_set_result+0x10>)
   b4f6c:	681b      	ldr	r3, [r3, #0]
   b4f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4f72:	9301      	str	r3, [sp, #4]
   b4f74:	bd08      	pop	{r3, pc}
   b4f76:	0000      	.short	0x0000
   b4f78:	00030220 	.word	0x00030220

000b4f7c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f7c:	b508      	push	{r3, lr}
   b4f7e:	4b02      	ldr	r3, [pc, #8]	; (b4f88 <network_connect+0xc>)
   b4f80:	681b      	ldr	r3, [r3, #0]
   b4f82:	685b      	ldr	r3, [r3, #4]
   b4f84:	9301      	str	r3, [sp, #4]
   b4f86:	bd08      	pop	{r3, pc}
   b4f88:	00030240 	.word	0x00030240

000b4f8c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4f8c:	b508      	push	{r3, lr}
   b4f8e:	4b02      	ldr	r3, [pc, #8]	; (b4f98 <network_connecting+0xc>)
   b4f90:	681b      	ldr	r3, [r3, #0]
   b4f92:	689b      	ldr	r3, [r3, #8]
   b4f94:	9301      	str	r3, [sp, #4]
   b4f96:	bd08      	pop	{r3, pc}
   b4f98:	00030240 	.word	0x00030240

000b4f9c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4f9c:	b508      	push	{r3, lr}
   b4f9e:	4b02      	ldr	r3, [pc, #8]	; (b4fa8 <network_disconnect+0xc>)
   b4fa0:	681b      	ldr	r3, [r3, #0]
   b4fa2:	68db      	ldr	r3, [r3, #12]
   b4fa4:	9301      	str	r3, [sp, #4]
   b4fa6:	bd08      	pop	{r3, pc}
   b4fa8:	00030240 	.word	0x00030240

000b4fac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4fac:	b508      	push	{r3, lr}
   b4fae:	4b02      	ldr	r3, [pc, #8]	; (b4fb8 <network_ready+0xc>)
   b4fb0:	681b      	ldr	r3, [r3, #0]
   b4fb2:	691b      	ldr	r3, [r3, #16]
   b4fb4:	9301      	str	r3, [sp, #4]
   b4fb6:	bd08      	pop	{r3, pc}
   b4fb8:	00030240 	.word	0x00030240

000b4fbc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4fbc:	b508      	push	{r3, lr}
   b4fbe:	4b02      	ldr	r3, [pc, #8]	; (b4fc8 <network_on+0xc>)
   b4fc0:	681b      	ldr	r3, [r3, #0]
   b4fc2:	695b      	ldr	r3, [r3, #20]
   b4fc4:	9301      	str	r3, [sp, #4]
   b4fc6:	bd08      	pop	{r3, pc}
   b4fc8:	00030240 	.word	0x00030240

000b4fcc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4fcc:	b508      	push	{r3, lr}
   b4fce:	4b02      	ldr	r3, [pc, #8]	; (b4fd8 <network_off+0xc>)
   b4fd0:	681b      	ldr	r3, [r3, #0]
   b4fd2:	699b      	ldr	r3, [r3, #24]
   b4fd4:	9301      	str	r3, [sp, #4]
   b4fd6:	bd08      	pop	{r3, pc}
   b4fd8:	00030240 	.word	0x00030240

000b4fdc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4fdc:	b508      	push	{r3, lr}
   b4fde:	4b02      	ldr	r3, [pc, #8]	; (b4fe8 <network_listen+0xc>)
   b4fe0:	681b      	ldr	r3, [r3, #0]
   b4fe2:	69db      	ldr	r3, [r3, #28]
   b4fe4:	9301      	str	r3, [sp, #4]
   b4fe6:	bd08      	pop	{r3, pc}
   b4fe8:	00030240 	.word	0x00030240

000b4fec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4fec:	b508      	push	{r3, lr}
   b4fee:	4b02      	ldr	r3, [pc, #8]	; (b4ff8 <network_listening+0xc>)
   b4ff0:	681b      	ldr	r3, [r3, #0]
   b4ff2:	6a1b      	ldr	r3, [r3, #32]
   b4ff4:	9301      	str	r3, [sp, #4]
   b4ff6:	bd08      	pop	{r3, pc}
   b4ff8:	00030240 	.word	0x00030240

000b4ffc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4ffc:	b508      	push	{r3, lr}
   b4ffe:	4b02      	ldr	r3, [pc, #8]	; (b5008 <network_set_listen_timeout+0xc>)
   b5000:	681b      	ldr	r3, [r3, #0]
   b5002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5004:	9301      	str	r3, [sp, #4]
   b5006:	bd08      	pop	{r3, pc}
   b5008:	00030240 	.word	0x00030240

000b500c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b500c:	b508      	push	{r3, lr}
   b500e:	4b02      	ldr	r3, [pc, #8]	; (b5018 <network_get_listen_timeout+0xc>)
   b5010:	681b      	ldr	r3, [r3, #0]
   b5012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5014:	9301      	str	r3, [sp, #4]
   b5016:	bd08      	pop	{r3, pc}
   b5018:	00030240 	.word	0x00030240

000b501c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b501c:	b508      	push	{r3, lr}
   b501e:	4b02      	ldr	r3, [pc, #8]	; (b5028 <network_is_on+0xc>)
   b5020:	681b      	ldr	r3, [r3, #0]
   b5022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5024:	9301      	str	r3, [sp, #4]
   b5026:	bd08      	pop	{r3, pc}
   b5028:	00030240 	.word	0x00030240

000b502c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b502c:	b508      	push	{r3, lr}
   b502e:	4b02      	ldr	r3, [pc, #8]	; (b5038 <network_is_off+0xc>)
   b5030:	681b      	ldr	r3, [r3, #0]
   b5032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5034:	9301      	str	r3, [sp, #4]
   b5036:	bd08      	pop	{r3, pc}
   b5038:	00030240 	.word	0x00030240

000b503c <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
   b503c:	b508      	push	{r3, lr}
   b503e:	4b02      	ldr	r3, [pc, #8]	; (b5048 <network_prefer+0xc>)
   b5040:	681b      	ldr	r3, [r3, #0]
   b5042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5044:	9301      	str	r3, [sp, #4]
   b5046:	bd08      	pop	{r3, pc}
   b5048:	00030240 	.word	0x00030240

000b504c <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
   b504c:	b508      	push	{r3, lr}
   b504e:	4b02      	ldr	r3, [pc, #8]	; (b5058 <network_is_preferred+0xc>)
   b5050:	681b      	ldr	r3, [r3, #0]
   b5052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5054:	9301      	str	r3, [sp, #4]
   b5056:	bd08      	pop	{r3, pc}
   b5058:	00030240 	.word	0x00030240

000b505c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b505c:	b508      	push	{r3, lr}
   b505e:	4b02      	ldr	r3, [pc, #8]	; (b5068 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5060:	681b      	ldr	r3, [r3, #0]
   b5062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5064:	9301      	str	r3, [sp, #4]
   b5066:	bd08      	pop	{r3, pc}
   b5068:	00030244 	.word	0x00030244

000b506c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || defined(DYNALIB_IMPORT)

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b506c:	b508      	push	{r3, lr}
   b506e:	4b02      	ldr	r3, [pc, #8]	; (b5078 <malloc+0xc>)
   b5070:	681b      	ldr	r3, [r3, #0]
   b5072:	681b      	ldr	r3, [r3, #0]
   b5074:	9301      	str	r3, [sp, #4]
   b5076:	bd08      	pop	{r3, pc}
   b5078:	0003021c 	.word	0x0003021c

000b507c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b507c:	b508      	push	{r3, lr}
   b507e:	4b02      	ldr	r3, [pc, #8]	; (b5088 <free+0xc>)
   b5080:	681b      	ldr	r3, [r3, #0]
   b5082:	685b      	ldr	r3, [r3, #4]
   b5084:	9301      	str	r3, [sp, #4]
   b5086:	bd08      	pop	{r3, pc}
   b5088:	0003021c 	.word	0x0003021c

000b508c <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || defined(DYNALIB_IMPORT)
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b508c:	b508      	push	{r3, lr}
   b508e:	4b02      	ldr	r3, [pc, #8]	; (b5098 <__assert_func+0xc>)
   b5090:	681b      	ldr	r3, [r3, #0]
   b5092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5094:	9301      	str	r3, [sp, #4]
   b5096:	bd08      	pop	{r3, pc}
   b5098:	0003021c 	.word	0x0003021c

000b509c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b509c:	b508      	push	{r3, lr}
   b509e:	4b02      	ldr	r3, [pc, #8]	; (b50a8 <newlib_impure_ptr_callback+0xc>)
   b50a0:	681b      	ldr	r3, [r3, #0]
   b50a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b50a4:	9301      	str	r3, [sp, #4]
   b50a6:	bd08      	pop	{r3, pc}
   b50a8:	0003021c 	.word	0x0003021c

000b50ac <__cxa_guard_acquire>:

DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
DYNALIB_FN(22, rt, __cxa_guard_acquire, int(__guard*))
   b50ac:	b508      	push	{r3, lr}
   b50ae:	4b02      	ldr	r3, [pc, #8]	; (b50b8 <__cxa_guard_acquire+0xc>)
   b50b0:	681b      	ldr	r3, [r3, #0]
   b50b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b50b4:	9301      	str	r3, [sp, #4]
   b50b6:	bd08      	pop	{r3, pc}
   b50b8:	0003021c 	.word	0x0003021c

000b50bc <__cxa_guard_release>:
DYNALIB_FN(23, rt, __cxa_guard_release, void(__guard*))
   b50bc:	b508      	push	{r3, lr}
   b50be:	4b02      	ldr	r3, [pc, #8]	; (b50c8 <__cxa_guard_release+0xc>)
   b50c0:	681b      	ldr	r3, [r3, #0]
   b50c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b50c4:	9301      	str	r3, [sp, #4]
   b50c6:	bd08      	pop	{r3, pc}
   b50c8:	0003021c 	.word	0x0003021c

000b50cc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b50cc:	2200      	movs	r2, #0
   b50ce:	6840      	ldr	r0, [r0, #4]
   b50d0:	4611      	mov	r1, r2
   b50d2:	f7ff bf8b 	b.w	b4fec <network_listening>

000b50d6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b50d6:	2200      	movs	r2, #0
   b50d8:	6840      	ldr	r0, [r0, #4]
   b50da:	4611      	mov	r1, r2
   b50dc:	f7ff bf96 	b.w	b500c <network_get_listen_timeout>

000b50e0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b50e0:	6840      	ldr	r0, [r0, #4]
   b50e2:	2200      	movs	r2, #0
   b50e4:	f7ff bf8a 	b.w	b4ffc <network_set_listen_timeout>

000b50e8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b50e8:	6840      	ldr	r0, [r0, #4]
   b50ea:	2200      	movs	r2, #0
   b50ec:	f081 0101 	eor.w	r1, r1, #1
   b50f0:	f7ff bf74 	b.w	b4fdc <network_listen>

000b50f4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b50f4:	2300      	movs	r3, #0
   b50f6:	6840      	ldr	r0, [r0, #4]
   b50f8:	461a      	mov	r2, r3
   b50fa:	4619      	mov	r1, r3
   b50fc:	f7ff bf66 	b.w	b4fcc <network_off>

000b5100 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5100:	2300      	movs	r3, #0
   b5102:	6840      	ldr	r0, [r0, #4]
   b5104:	461a      	mov	r2, r3
   b5106:	4619      	mov	r1, r3
   b5108:	f7ff bf58 	b.w	b4fbc <network_on>

000b510c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b510c:	2200      	movs	r2, #0
   b510e:	6840      	ldr	r0, [r0, #4]
   b5110:	4611      	mov	r1, r2
   b5112:	f7ff bf4b 	b.w	b4fac <network_ready>

000b5116 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5116:	2200      	movs	r2, #0
   b5118:	6840      	ldr	r0, [r0, #4]
   b511a:	4611      	mov	r1, r2
   b511c:	f7ff bf36 	b.w	b4f8c <network_connecting>

000b5120 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5120:	6840      	ldr	r0, [r0, #4]
   b5122:	2200      	movs	r2, #0
   b5124:	2102      	movs	r1, #2
   b5126:	f7ff bf39 	b.w	b4f9c <network_disconnect>

000b512a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b512a:	2300      	movs	r3, #0
   b512c:	6840      	ldr	r0, [r0, #4]
   b512e:	461a      	mov	r2, r3
   b5130:	f7ff bf24 	b.w	b4f7c <network_connect>

000b5134 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name, bool flushCache = false);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5134:	4b02      	ldr	r3, [pc, #8]	; (b5140 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5136:	2203      	movs	r2, #3
   b5138:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b513a:	4a02      	ldr	r2, [pc, #8]	; (b5144 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b513c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b513e:	4770      	bx	lr
   b5140:	2003df14 	.word	0x2003df14
   b5144:	000b5c94 	.word	0x000b5c94

000b5148 <_GLOBAL__sub_I__ZN8particle10CloudEvent15s_subscriptionsE>:
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   b5148:	4b02      	ldr	r3, [pc, #8]	; (b5154 <_GLOBAL__sub_I__ZN8particle10CloudEvent15s_subscriptionsE+0xc>)
   b514a:	2200      	movs	r2, #0
   b514c:	e9c3 2200 	strd	r2, r2, [r3]
   b5150:	609a      	str	r2, [r3, #8]
        // Keep the reference around until the application callback is called
        d.unwrap();
    }
}

} // namespace particle
   b5152:	4770      	bx	lr
   b5154:	2003df1c 	.word	0x2003df1c

000b5158 <_ZN8particle11TetherClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5158:	2200      	movs	r2, #0
   b515a:	6840      	ldr	r0, [r0, #4]
   b515c:	4611      	mov	r1, r2
   b515e:	f7ff bf45 	b.w	b4fec <network_listening>

000b5162 <_ZN8particle11TetherClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5162:	2200      	movs	r2, #0
   b5164:	6840      	ldr	r0, [r0, #4]
   b5166:	4611      	mov	r1, r2
   b5168:	f7ff bf50 	b.w	b500c <network_get_listen_timeout>

000b516c <_ZN8particle11TetherClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b516c:	6840      	ldr	r0, [r0, #4]
   b516e:	2200      	movs	r2, #0
   b5170:	f7ff bf44 	b.w	b4ffc <network_set_listen_timeout>

000b5174 <_ZN8particle11TetherClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5174:	6840      	ldr	r0, [r0, #4]
   b5176:	2200      	movs	r2, #0
   b5178:	f081 0101 	eor.w	r1, r1, #1
   b517c:	f7ff bf2e 	b.w	b4fdc <network_listen>

000b5180 <_ZN8particle11TetherClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5180:	2300      	movs	r3, #0
   b5182:	6840      	ldr	r0, [r0, #4]
   b5184:	461a      	mov	r2, r3
   b5186:	4619      	mov	r1, r3
   b5188:	f7ff bf20 	b.w	b4fcc <network_off>

000b518c <_ZN8particle11TetherClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b518c:	2300      	movs	r3, #0
   b518e:	6840      	ldr	r0, [r0, #4]
   b5190:	461a      	mov	r2, r3
   b5192:	4619      	mov	r1, r3
   b5194:	f7ff bf12 	b.w	b4fbc <network_on>

000b5198 <_ZN8particle11TetherClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5198:	2200      	movs	r2, #0
   b519a:	6840      	ldr	r0, [r0, #4]
   b519c:	4611      	mov	r1, r2
   b519e:	f7ff bf05 	b.w	b4fac <network_ready>

000b51a2 <_ZN8particle11TetherClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b51a2:	2200      	movs	r2, #0
   b51a4:	6840      	ldr	r0, [r0, #4]
   b51a6:	4611      	mov	r1, r2
   b51a8:	f7ff bef0 	b.w	b4f8c <network_connecting>

000b51ac <_ZN8particle11TetherClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b51ac:	6840      	ldr	r0, [r0, #4]
   b51ae:	2200      	movs	r2, #0
   b51b0:	2102      	movs	r1, #2
   b51b2:	f7ff bef3 	b.w	b4f9c <network_disconnect>

000b51b6 <_ZN8particle11TetherClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b51b6:	2300      	movs	r3, #0
   b51b8:	6840      	ldr	r0, [r0, #4]
   b51ba:	461a      	mov	r2, r3
   b51bc:	f7ff bede 	b.w	b4f7c <network_connect>

000b51c0 <_GLOBAL__sub_I__ZN8particle6TetherE>:
   b51c0:	4b02      	ldr	r3, [pc, #8]	; (b51cc <_GLOBAL__sub_I__ZN8particle6TetherE+0xc>)
   b51c2:	2206      	movs	r2, #6
   b51c4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_PPP_SERVER) {
   b51c6:	4a02      	ldr	r2, [pc, #8]	; (b51d0 <_GLOBAL__sub_I__ZN8particle6TetherE+0x10>)
   b51c8:	601a      	str	r2, [r3, #0]
        return if_request(iface, IF_REQ_DRIVER_SPECIFIC, &settings, sizeof(settings), nullptr);
    }
    return SYSTEM_ERROR_NOT_FOUND;
}

} // spark
   b51ca:	4770      	bx	lr
   b51cc:	2003df28 	.word	0x2003df28
   b51d0:	000b5cd8 	.word	0x000b5cd8

000b51d4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b51d4:	4b05      	ldr	r3, [pc, #20]	; (b51ec <_GLOBAL__sub_I_System+0x18>)
   b51d6:	2202      	movs	r2, #2
   b51d8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b51da:	4b05      	ldr	r3, [pc, #20]	; (b51f0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b51dc:	4a05      	ldr	r2, [pc, #20]	; (b51f4 <_GLOBAL__sub_I_System+0x20>)
   b51de:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b51e0:	2000      	movs	r0, #0
   b51e2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b51e6:	f7ff bea5 	b.w	b4f34 <set_system_mode>
   b51ea:	bf00      	nop
   b51ec:	2003df3c 	.word	0x2003df3c
   b51f0:	2003df30 	.word	0x2003df30
   b51f4:	ffff0000 	.word	0xffff0000

000b51f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b51f8:	4802      	ldr	r0, [pc, #8]	; (b5204 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b51fa:	2300      	movs	r3, #0
   b51fc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b51fe:	f7ff bdc1 	b.w	b4d84 <os_mutex_recursive_create>
   b5202:	bf00      	nop
   b5204:	2003df40 	.word	0x2003df40

000b5208 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b520a:	4606      	mov	r6, r0
   b520c:	460d      	mov	r5, r1
  size_t n = 0;
   b520e:	188f      	adds	r7, r1, r2
   b5210:	2400      	movs	r4, #0
  while (size--) {
   b5212:	42bd      	cmp	r5, r7
   b5214:	d00c      	beq.n	b5230 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5216:	6833      	ldr	r3, [r6, #0]
   b5218:	f815 1b01 	ldrb.w	r1, [r5], #1
   b521c:	689b      	ldr	r3, [r3, #8]
   b521e:	4630      	mov	r0, r6
   b5220:	4798      	blx	r3
     if (chunk>=0)
   b5222:	1e03      	subs	r3, r0, #0
   b5224:	db01      	blt.n	b522a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5226:	441c      	add	r4, r3
  while (size--) {
   b5228:	e7f3      	b.n	b5212 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b522a:	2c00      	cmp	r4, #0
   b522c:	bf08      	it	eq
   b522e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5230:	4620      	mov	r0, r4
   b5232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5234 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5234:	6803      	ldr	r3, [r0, #0]
   b5236:	689b      	ldr	r3, [r3, #8]
   b5238:	4718      	bx	r3

000b523a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b523a:	b530      	push	{r4, r5, lr}
   b523c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b523e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5240:	2a01      	cmp	r2, #1
  *str = '\0';
   b5242:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5246:	bf98      	it	ls
   b5248:	220a      	movls	r2, #10
   b524a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b524c:	460d      	mov	r5, r1
   b524e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5252:	fb01 5312 	mls	r3, r1, r2, r5
   b5256:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b525a:	2b09      	cmp	r3, #9
   b525c:	bf94      	ite	ls
   b525e:	3330      	addls	r3, #48	; 0x30
   b5260:	3337      	addhi	r3, #55	; 0x37
   b5262:	b2db      	uxtb	r3, r3
  } while(n);
   b5264:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5266:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b526a:	d9ef      	bls.n	b524c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b526c:	4621      	mov	r1, r4
   b526e:	f7ff fd4f 	bl	b4d10 <_ZN5Print5writeEPKc>
}
   b5272:	b00b      	add	sp, #44	; 0x2c
   b5274:	bd30      	pop	{r4, r5, pc}

000b5276 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b5276:	b510      	push	{r4, lr}
   b5278:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b527a:	f7ff fd7b 	bl	b4d74 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b527e:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b5280:	6823      	ldr	r3, [r4, #0]
   b5282:	4620      	mov	r0, r4
   b5284:	695b      	ldr	r3, [r3, #20]
   b5286:	4798      	blx	r3
    if (c >= 0) return c;
   b5288:	2800      	cmp	r0, #0
   b528a:	da08      	bge.n	b529e <_ZN6Stream9timedReadEv+0x28>
   b528c:	f7ff fd72 	bl	b4d74 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b5290:	68e3      	ldr	r3, [r4, #12]
   b5292:	1ac0      	subs	r0, r0, r3
   b5294:	68a3      	ldr	r3, [r4, #8]
   b5296:	4298      	cmp	r0, r3
   b5298:	d3f2      	bcc.n	b5280 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b529a:	f04f 30ff 	mov.w	r0, #4294967295
}
   b529e:	bd10      	pop	{r4, pc}

000b52a0 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b52a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b52a4:	4607      	mov	r7, r0
   b52a6:	460c      	mov	r4, r1
   b52a8:	188e      	adds	r6, r1, r2
   b52aa:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b52ac:	42b5      	cmp	r5, r6
   b52ae:	eba5 0804 	sub.w	r8, r5, r4
   b52b2:	d007      	beq.n	b52c4 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b52b4:	4638      	mov	r0, r7
   b52b6:	f7ff ffde 	bl	b5276 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b52ba:	1e03      	subs	r3, r0, #0
   b52bc:	db02      	blt.n	b52c4 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b52be:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b52c2:	e7f3      	b.n	b52ac <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b52c4:	4640      	mov	r0, r8
   b52c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b52cc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b52cc:	4b01      	ldr	r3, [pc, #4]	; (b52d4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b52ce:	4a02      	ldr	r2, [pc, #8]	; (b52d8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b52d0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b52d2:	4770      	bx	lr
   b52d4:	2003df44 	.word	0x2003df44
   b52d8:	000b5d14 	.word	0x000b5d14

000b52dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b52dc:	4b02      	ldr	r3, [pc, #8]	; (b52e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b52de:	681a      	ldr	r2, [r3, #0]
   b52e0:	4b02      	ldr	r3, [pc, #8]	; (b52ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b52e2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b52e4:	4770      	bx	lr
   b52e6:	bf00      	nop
   b52e8:	2003de90 	.word	0x2003de90
   b52ec:	2003df48 	.word	0x2003df48

000b52f0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b52f0:	2100      	movs	r1, #0
   b52f2:	f7ff be27 	b.w	b4f44 <system_delay_ms>
	...

000b52f8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b52f8:	4b01      	ldr	r3, [pc, #4]	; (b5300 <_GLOBAL__sub_I_RGB+0x8>)
   b52fa:	2200      	movs	r2, #0
   b52fc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b52fe:	4770      	bx	lr
   b5300:	2003df4c 	.word	0x2003df4c

000b5304 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5304:	4b01      	ldr	r3, [pc, #4]	; (b530c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5306:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5308:	4770      	bx	lr
   b530a:	bf00      	nop
   b530c:	2003de94 	.word	0x2003de94

000b5310 <serialEventRun>:
{
   b5310:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5312:	4b0b      	ldr	r3, [pc, #44]	; (b5340 <serialEventRun+0x30>)
   b5314:	b143      	cbz	r3, b5328 <serialEventRun+0x18>
   b5316:	f000 f963 	bl	b55e0 <_Z16_fetch_usbserialv>
   b531a:	6803      	ldr	r3, [r0, #0]
   b531c:	691b      	ldr	r3, [r3, #16]
   b531e:	4798      	blx	r3
   b5320:	2800      	cmp	r0, #0
   b5322:	dd01      	ble.n	b5328 <serialEventRun+0x18>
        serialEvent();
   b5324:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5328:	4b06      	ldr	r3, [pc, #24]	; (b5344 <serialEventRun+0x34>)
   b532a:	b143      	cbz	r3, b533e <serialEventRun+0x2e>
   b532c:	f000 fbb8 	bl	b5aa0 <_Z22__fetch_global_Serial1v>
   b5330:	6803      	ldr	r3, [r0, #0]
   b5332:	691b      	ldr	r3, [r3, #16]
   b5334:	4798      	blx	r3
   b5336:	2800      	cmp	r0, #0
   b5338:	dd01      	ble.n	b533e <serialEventRun+0x2e>
        serialEvent1();
   b533a:	f3af 8000 	nop.w
}
   b533e:	bd08      	pop	{r3, pc}
	...

000b5348 <_post_loop>:
{
   b5348:	b508      	push	{r3, lr}
	serialEventRun();
   b534a:	f7ff ffe1 	bl	b5310 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b534e:	f7ff fd11 	bl	b4d74 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5352:	4b01      	ldr	r3, [pc, #4]	; (b5358 <_post_loop+0x10>)
   b5354:	6018      	str	r0, [r3, #0]
}
   b5356:	bd08      	pop	{r3, pc}
   b5358:	2003dfe0 	.word	0x2003dfe0

000b535c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b535c:	4805      	ldr	r0, [pc, #20]	; (b5374 <_Z33system_initialize_user_backup_ramv+0x18>)
   b535e:	4a06      	ldr	r2, [pc, #24]	; (b5378 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5360:	4906      	ldr	r1, [pc, #24]	; (b537c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5362:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5364:	1a12      	subs	r2, r2, r0
   b5366:	f000 fc07 	bl	b5b78 <memcpy>
    __backup_sram_signature = signature;
   b536a:	4b05      	ldr	r3, [pc, #20]	; (b5380 <_Z33system_initialize_user_backup_ramv+0x24>)
   b536c:	4a05      	ldr	r2, [pc, #20]	; (b5384 <_Z33system_initialize_user_backup_ramv+0x28>)
   b536e:	601a      	str	r2, [r3, #0]
}
   b5370:	bd08      	pop	{r3, pc}
   b5372:	bf00      	nop
   b5374:	2003f400 	.word	0x2003f400
   b5378:	2003f404 	.word	0x2003f404
   b537c:	000b5fc8 	.word	0x000b5fc8
   b5380:	2003f400 	.word	0x2003f400
   b5384:	9a271c1e 	.word	0x9a271c1e

000b5388 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5388:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b538a:	2300      	movs	r3, #0
   b538c:	9300      	str	r3, [sp, #0]
   b538e:	461a      	mov	r2, r3
   b5390:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5394:	f7ff fde8 	bl	b4f68 <system_ctrl_set_result>
}
   b5398:	b003      	add	sp, #12
   b539a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b53a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b53a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b53a2:	8843      	ldrh	r3, [r0, #2]
   b53a4:	2b0a      	cmp	r3, #10
   b53a6:	d008      	beq.n	b53ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b53a8:	2b50      	cmp	r3, #80	; 0x50
   b53aa:	d10b      	bne.n	b53c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b53ac:	4b09      	ldr	r3, [pc, #36]	; (b53d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b53ae:	681b      	ldr	r3, [r3, #0]
   b53b0:	b14b      	cbz	r3, b53c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b53b2:	b003      	add	sp, #12
   b53b4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b53b8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b53ba:	f7ff ffe5 	bl	b5388 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b53be:	b003      	add	sp, #12
   b53c0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b53c4:	2300      	movs	r3, #0
   b53c6:	9300      	str	r3, [sp, #0]
   b53c8:	461a      	mov	r2, r3
   b53ca:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b53ce:	f7ff fdcb 	bl	b4f68 <system_ctrl_set_result>
}
   b53d2:	e7f4      	b.n	b53be <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b53d4:	2003df60 	.word	0x2003df60

000b53d8 <module_user_init_hook>:
{
   b53d8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b53da:	4812      	ldr	r0, [pc, #72]	; (b5424 <module_user_init_hook+0x4c>)
   b53dc:	2100      	movs	r1, #0
   b53de:	f7ff fe5d 	bl	b509c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b53e2:	4b11      	ldr	r3, [pc, #68]	; (b5428 <module_user_init_hook+0x50>)
   b53e4:	681a      	ldr	r2, [r3, #0]
   b53e6:	4b11      	ldr	r3, [pc, #68]	; (b542c <module_user_init_hook+0x54>)
   b53e8:	429a      	cmp	r2, r3
   b53ea:	4b11      	ldr	r3, [pc, #68]	; (b5430 <module_user_init_hook+0x58>)
   b53ec:	bf0c      	ite	eq
   b53ee:	2201      	moveq	r2, #1
   b53f0:	2200      	movne	r2, #0
   b53f2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b53f4:	d001      	beq.n	b53fa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b53f6:	f7ff ffb1 	bl	b535c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b53fa:	f7ff fcb3 	bl	b4d64 <HAL_RNG_GetRandomNumber>
   b53fe:	4604      	mov	r4, r0
    srand(seed);
   b5400:	f000 fbd0 	bl	b5ba4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5404:	4b0b      	ldr	r3, [pc, #44]	; (b5434 <module_user_init_hook+0x5c>)
   b5406:	b113      	cbz	r3, b540e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5408:	4620      	mov	r0, r4
   b540a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b540e:	2100      	movs	r1, #0
   b5410:	4808      	ldr	r0, [pc, #32]	; (b5434 <module_user_init_hook+0x5c>)
   b5412:	f7ff fe23 	bl	b505c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b541a:	4807      	ldr	r0, [pc, #28]	; (b5438 <module_user_init_hook+0x60>)
   b541c:	2100      	movs	r1, #0
   b541e:	f7ff bd99 	b.w	b4f54 <system_ctrl_set_app_request_handler>
   b5422:	bf00      	nop
   b5424:	000b5305 	.word	0x000b5305
   b5428:	2003f400 	.word	0x2003f400
   b542c:	9a271c1e 	.word	0x9a271c1e
   b5430:	2003df5c 	.word	0x2003df5c
   b5434:	00000000 	.word	0x00000000
   b5438:	000b53a1 	.word	0x000b53a1

000b543c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b543c:	4770      	bx	lr

000b543e <_ZN9IPAddressD0Ev>:
   b543e:	b510      	push	{r4, lr}
   b5440:	2118      	movs	r1, #24
   b5442:	4604      	mov	r4, r0
   b5444:	f7ff fa4f 	bl	b48e6 <_ZdlPvj>
   b5448:	4620      	mov	r0, r4
   b544a:	bd10      	pop	{r4, pc}

000b544c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b544c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b544e:	7d03      	ldrb	r3, [r0, #20]
   b5450:	2b06      	cmp	r3, #6
{
   b5452:	b08d      	sub	sp, #52	; 0x34
   b5454:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5456:	f100 0704 	add.w	r7, r0, #4
   b545a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b545e:	d012      	beq.n	b5486 <_ZNK9IPAddress7printToER5Print+0x3a>
   b5460:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5464:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5468:	220a      	movs	r2, #10
   b546a:	4630      	mov	r0, r6
   b546c:	f7ff fee5 	bl	b523a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5470:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5472:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5474:	d019      	beq.n	b54aa <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5476:	2c00      	cmp	r4, #0
   b5478:	d0f4      	beq.n	b5464 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b547a:	212e      	movs	r1, #46	; 0x2e
   b547c:	4630      	mov	r0, r6
   b547e:	f7ff fed9 	bl	b5234 <_ZN5Print5printEc>
   b5482:	4404      	add	r4, r0
   b5484:	e7ee      	b.n	b5464 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5486:	232f      	movs	r3, #47	; 0x2f
   b5488:	466a      	mov	r2, sp
   b548a:	4639      	mov	r1, r7
   b548c:	200a      	movs	r0, #10
		buf[0] = 0;
   b548e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5492:	f7ff fc7f 	bl	b4d94 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5496:	4668      	mov	r0, sp
   b5498:	f7ff f9e0 	bl	b485c <strlen>
   b549c:	6833      	ldr	r3, [r6, #0]
   b549e:	4602      	mov	r2, r0
   b54a0:	68db      	ldr	r3, [r3, #12]
   b54a2:	4669      	mov	r1, sp
   b54a4:	4630      	mov	r0, r6
   b54a6:	4798      	blx	r3
   b54a8:	4604      	mov	r4, r0
    }
    return n;
}
   b54aa:	4620      	mov	r0, r4
   b54ac:	b00d      	add	sp, #52	; 0x34
   b54ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b54b0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b54b0:	b510      	push	{r4, lr}
   b54b2:	4b05      	ldr	r3, [pc, #20]	; (b54c8 <_ZN9IPAddressC1Ev+0x18>)
   b54b4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b54b6:	2211      	movs	r2, #17
   b54b8:	f840 3b04 	str.w	r3, [r0], #4
   b54bc:	2100      	movs	r1, #0
   b54be:	f000 fb69 	bl	b5b94 <memset>
}
   b54c2:	4620      	mov	r0, r4
   b54c4:	bd10      	pop	{r4, pc}
   b54c6:	bf00      	nop
   b54c8:	000b5d3c 	.word	0x000b5d3c

000b54cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b54cc:	4603      	mov	r3, r0
   b54ce:	4a07      	ldr	r2, [pc, #28]	; (b54ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b54d0:	b510      	push	{r4, lr}
   b54d2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b54d6:	f101 0210 	add.w	r2, r1, #16
   b54da:	f851 4b04 	ldr.w	r4, [r1], #4
   b54de:	f843 4b04 	str.w	r4, [r3], #4
   b54e2:	4291      	cmp	r1, r2
   b54e4:	d1f9      	bne.n	b54da <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b54e6:	780a      	ldrb	r2, [r1, #0]
   b54e8:	701a      	strb	r2, [r3, #0]
}
   b54ea:	bd10      	pop	{r4, pc}
   b54ec:	000b5d3c 	.word	0x000b5d3c

000b54f0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b54f0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b54f2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b54f6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b54fa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b54fe:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5502:	2304      	movs	r3, #4
   b5504:	6041      	str	r1, [r0, #4]
   b5506:	7503      	strb	r3, [r0, #20]
}
   b5508:	bd10      	pop	{r4, pc}
	...

000b550c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b550c:	b507      	push	{r0, r1, r2, lr}
   b550e:	4b06      	ldr	r3, [pc, #24]	; (b5528 <_ZN9IPAddressC1EPKh+0x1c>)
   b5510:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5512:	78cb      	ldrb	r3, [r1, #3]
   b5514:	9300      	str	r3, [sp, #0]
   b5516:	788b      	ldrb	r3, [r1, #2]
   b5518:	784a      	ldrb	r2, [r1, #1]
   b551a:	7809      	ldrb	r1, [r1, #0]
   b551c:	f7ff ffe8 	bl	b54f0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5520:	b003      	add	sp, #12
   b5522:	f85d fb04 	ldr.w	pc, [sp], #4
   b5526:	bf00      	nop
   b5528:	000b5d3c 	.word	0x000b5d3c

000b552c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b552c:	7441      	strb	r1, [r0, #17]
}
   b552e:	4770      	bx	lr

000b5530 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5530:	4770      	bx	lr

000b5532 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5532:	4770      	bx	lr

000b5534 <_ZN9USBSerial4readEv>:
{
   b5534:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5536:	2100      	movs	r1, #0
   b5538:	7c00      	ldrb	r0, [r0, #16]
   b553a:	f7ff fcdb 	bl	b4ef4 <HAL_USB_USART_Receive_Data>
}
   b553e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5542:	bd08      	pop	{r3, pc}

000b5544 <_ZN9USBSerial4peekEv>:
{
   b5544:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5546:	2101      	movs	r1, #1
   b5548:	7c00      	ldrb	r0, [r0, #16]
   b554a:	f7ff fcd3 	bl	b4ef4 <HAL_USB_USART_Receive_Data>
}
   b554e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5552:	bd08      	pop	{r3, pc}

000b5554 <_ZN9USBSerial17availableForWriteEv>:
{
   b5554:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5556:	7c00      	ldrb	r0, [r0, #16]
   b5558:	f7ff fcc4 	bl	b4ee4 <HAL_USB_USART_Available_Data_For_Write>
}
   b555c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5560:	bd08      	pop	{r3, pc}

000b5562 <_ZN9USBSerial9availableEv>:
{
   b5562:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5564:	7c00      	ldrb	r0, [r0, #16]
   b5566:	f7ff fcb5 	bl	b4ed4 <HAL_USB_USART_Available_Data>
}
   b556a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b556e:	bd08      	pop	{r3, pc}

000b5570 <_ZN9USBSerial5writeEh>:
{
   b5570:	b513      	push	{r0, r1, r4, lr}
   b5572:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5574:	7c00      	ldrb	r0, [r0, #16]
{
   b5576:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5578:	f7ff fcb4 	bl	b4ee4 <HAL_USB_USART_Available_Data_For_Write>
   b557c:	2800      	cmp	r0, #0
   b557e:	9901      	ldr	r1, [sp, #4]
   b5580:	dc01      	bgt.n	b5586 <_ZN9USBSerial5writeEh+0x16>
   b5582:	7c60      	ldrb	r0, [r4, #17]
   b5584:	b120      	cbz	r0, b5590 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5586:	7c20      	ldrb	r0, [r4, #16]
   b5588:	f7ff fcbc 	bl	b4f04 <HAL_USB_USART_Send_Data>
   b558c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5590:	b002      	add	sp, #8
   b5592:	bd10      	pop	{r4, pc}

000b5594 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5594:	7c00      	ldrb	r0, [r0, #16]
   b5596:	f7ff bcbd 	b.w	b4f14 <HAL_USB_USART_Flush_Data>

000b559a <_ZN9USBSerialD0Ev>:
   b559a:	b510      	push	{r4, lr}
   b559c:	2114      	movs	r1, #20
   b559e:	4604      	mov	r4, r0
   b55a0:	f7ff f9a1 	bl	b48e6 <_ZdlPvj>
   b55a4:	4620      	mov	r0, r4
   b55a6:	bd10      	pop	{r4, pc}

000b55a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b55a8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b55aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b55ae:	4604      	mov	r4, r0
   b55b0:	4608      	mov	r0, r1
   b55b2:	2100      	movs	r1, #0
   b55b4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b55b8:	4b04      	ldr	r3, [pc, #16]	; (b55cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b55ba:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b55bc:	2301      	movs	r3, #1
  _serial = serial;
   b55be:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b55c0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b55c2:	4611      	mov	r1, r2
   b55c4:	f7ff fc7e 	bl	b4ec4 <HAL_USB_USART_Init>
}
   b55c8:	4620      	mov	r0, r4
   b55ca:	bd10      	pop	{r4, pc}
   b55cc:	000b5d50 	.word	0x000b5d50

000b55d0 <_Z19acquireSerialBufferv>:
{
   b55d0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b55d2:	2214      	movs	r2, #20
{
   b55d4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b55d6:	2100      	movs	r1, #0
   b55d8:	f000 fadc 	bl	b5b94 <memset>
}
   b55dc:	4620      	mov	r0, r4
   b55de:	bd10      	pop	{r4, pc}

000b55e0 <_Z16_fetch_usbserialv>:
{
   b55e0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b55e2:	4c0f      	ldr	r4, [pc, #60]	; (b5620 <_Z16_fetch_usbserialv+0x40>)
{
   b55e4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b55e6:	a803      	add	r0, sp, #12
   b55e8:	f7ff fff2 	bl	b55d0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b55ec:	7821      	ldrb	r1, [r4, #0]
   b55ee:	f3bf 8f5b 	dmb	ish
   b55f2:	f011 0101 	ands.w	r1, r1, #1
   b55f6:	d10f      	bne.n	b5618 <_Z16_fetch_usbserialv+0x38>
   b55f8:	4620      	mov	r0, r4
   b55fa:	9101      	str	r1, [sp, #4]
   b55fc:	f7ff fd56 	bl	b50ac <__cxa_guard_acquire>
   b5600:	9901      	ldr	r1, [sp, #4]
   b5602:	b148      	cbz	r0, b5618 <_Z16_fetch_usbserialv+0x38>
   b5604:	aa03      	add	r2, sp, #12
   b5606:	4807      	ldr	r0, [pc, #28]	; (b5624 <_Z16_fetch_usbserialv+0x44>)
   b5608:	f7ff ffce 	bl	b55a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b560c:	4620      	mov	r0, r4
   b560e:	f7ff fd55 	bl	b50bc <__cxa_guard_release>
   b5612:	4805      	ldr	r0, [pc, #20]	; (b5628 <_Z16_fetch_usbserialv+0x48>)
   b5614:	f000 faaa 	bl	b5b6c <atexit>
	return _usbserial;
}
   b5618:	4802      	ldr	r0, [pc, #8]	; (b5624 <_Z16_fetch_usbserialv+0x44>)
   b561a:	b008      	add	sp, #32
   b561c:	bd10      	pop	{r4, pc}
   b561e:	bf00      	nop
   b5620:	2003df64 	.word	0x2003df64
   b5624:	2003df68 	.word	0x2003df68
   b5628:	000b5531 	.word	0x000b5531

000b562c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b562c:	2200      	movs	r2, #0
   b562e:	6840      	ldr	r0, [r0, #4]
   b5630:	4611      	mov	r1, r2
   b5632:	f7ff bcbb 	b.w	b4fac <network_ready>

000b5636 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b5636:	2200      	movs	r2, #0
   b5638:	6840      	ldr	r0, [r0, #4]
   b563a:	4611      	mov	r1, r2
   b563c:	f7ff bcd6 	b.w	b4fec <network_listening>

000b5640 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5640:	2200      	movs	r2, #0
   b5642:	6840      	ldr	r0, [r0, #4]
   b5644:	4611      	mov	r1, r2
   b5646:	f7ff bce1 	b.w	b500c <network_get_listen_timeout>

000b564a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b564a:	6840      	ldr	r0, [r0, #4]
   b564c:	2200      	movs	r2, #0
   b564e:	f7ff bcd5 	b.w	b4ffc <network_set_listen_timeout>

000b5652 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5652:	6840      	ldr	r0, [r0, #4]
   b5654:	2200      	movs	r2, #0
   b5656:	f081 0101 	eor.w	r1, r1, #1
   b565a:	f7ff bcbf 	b.w	b4fdc <network_listen>

000b565e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b565e:	2300      	movs	r3, #0
   b5660:	6840      	ldr	r0, [r0, #4]
   b5662:	461a      	mov	r2, r3
   b5664:	4619      	mov	r1, r3
   b5666:	f7ff bcb1 	b.w	b4fcc <network_off>

000b566a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b566a:	2300      	movs	r3, #0
   b566c:	6840      	ldr	r0, [r0, #4]
   b566e:	461a      	mov	r2, r3
   b5670:	4619      	mov	r1, r3
   b5672:	f7ff bca3 	b.w	b4fbc <network_on>

000b5676 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5676:	2200      	movs	r2, #0
   b5678:	6840      	ldr	r0, [r0, #4]
   b567a:	4611      	mov	r1, r2
   b567c:	f7ff bc86 	b.w	b4f8c <network_connecting>

000b5680 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5680:	6840      	ldr	r0, [r0, #4]
   b5682:	2200      	movs	r2, #0
   b5684:	2102      	movs	r1, #2
   b5686:	f7ff bc89 	b.w	b4f9c <network_disconnect>

000b568a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b568a:	2300      	movs	r3, #0
   b568c:	6840      	ldr	r0, [r0, #4]
   b568e:	461a      	mov	r2, r3
   b5690:	f7ff bc74 	b.w	b4f7c <network_connect>

000b5694 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b5694:	4b08      	ldr	r3, [pc, #32]	; (b56b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b5696:	b510      	push	{r4, lr}
   b5698:	2428      	movs	r4, #40	; 0x28
   b569a:	4622      	mov	r2, r4
   b569c:	4618      	mov	r0, r3
   b569e:	2100      	movs	r1, #0
   b56a0:	f000 fa78 	bl	b5b94 <memset>
   b56a4:	4b05      	ldr	r3, [pc, #20]	; (b56bc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b56a6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b56a8:	f04f 32ff 	mov.w	r2, #4294967295
   b56ac:	6042      	str	r2, [r0, #4]
   b56ae:	2204      	movs	r2, #4
   b56b0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b56b2:	4a03      	ldr	r2, [pc, #12]	; (b56c0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b56b4:	601a      	str	r2, [r3, #0]
   b56b6:	bd10      	pop	{r4, pc}
   b56b8:	2003df84 	.word	0x2003df84
   b56bc:	2003df7c 	.word	0x2003df7c
   b56c0:	000b5d84 	.word	0x000b5d84

000b56c4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b56c4:	4770      	bx	lr

000b56c6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b56c6:	7441      	strb	r1, [r0, #17]
}
   b56c8:	4770      	bx	lr

000b56ca <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b56ca:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b56cc:	7c00      	ldrb	r0, [r0, #16]
   b56ce:	f7ff fb91 	bl	b4df4 <hal_usart_available_data_for_write>
}
   b56d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b56d6:	bd08      	pop	{r3, pc}

000b56d8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b56d8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b56da:	7c00      	ldrb	r0, [r0, #16]
   b56dc:	f7ff fb6a 	bl	b4db4 <hal_usart_available>
}
   b56e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b56e4:	bd08      	pop	{r3, pc}

000b56e6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b56e6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b56e8:	7c00      	ldrb	r0, [r0, #16]
   b56ea:	f7ff fb73 	bl	b4dd4 <hal_usart_peek>
}
   b56ee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b56f2:	bd08      	pop	{r3, pc}

000b56f4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b56f4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b56f6:	7c00      	ldrb	r0, [r0, #16]
   b56f8:	f7ff fb64 	bl	b4dc4 <hal_usart_read>
}
   b56fc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5700:	bd08      	pop	{r3, pc}

000b5702 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5702:	7c00      	ldrb	r0, [r0, #16]
   b5704:	f7ff bb6e 	b.w	b4de4 <hal_usart_flush>

000b5708 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5708:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b570a:	7c45      	ldrb	r5, [r0, #17]
{
   b570c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b570e:	b12d      	cbz	r5, b571c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5710:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5712:	b003      	add	sp, #12
   b5714:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5718:	f7ff bb44 	b.w	b4da4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b571c:	7c00      	ldrb	r0, [r0, #16]
   b571e:	9101      	str	r1, [sp, #4]
   b5720:	f7ff fb68 	bl	b4df4 <hal_usart_available_data_for_write>
   b5724:	2800      	cmp	r0, #0
   b5726:	9901      	ldr	r1, [sp, #4]
   b5728:	dcf2      	bgt.n	b5710 <_ZN11USARTSerial5writeEh+0x8>
}
   b572a:	4628      	mov	r0, r5
   b572c:	b003      	add	sp, #12
   b572e:	bd30      	pop	{r4, r5, pc}

000b5730 <_ZN11USARTSerialD0Ev>:
   b5730:	b510      	push	{r4, lr}
   b5732:	2114      	movs	r1, #20
   b5734:	4604      	mov	r4, r0
   b5736:	f7ff f8d6 	bl	b48e6 <_ZdlPvj>
   b573a:	4620      	mov	r0, r4
   b573c:	bd10      	pop	{r4, pc}
	...

000b5740 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5740:	b510      	push	{r4, lr}
   b5742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5746:	4604      	mov	r4, r0
   b5748:	4608      	mov	r0, r1
   b574a:	4611      	mov	r1, r2
   b574c:	2200      	movs	r2, #0
   b574e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5752:	4b04      	ldr	r3, [pc, #16]	; (b5764 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5754:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5756:	2301      	movs	r3, #1
  _serial = serial;
   b5758:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b575a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b575c:	f7ff fb5a 	bl	b4e14 <hal_usart_init_ex>
}
   b5760:	4620      	mov	r0, r4
   b5762:	bd10      	pop	{r4, pc}
   b5764:	000b5dc8 	.word	0x000b5dc8

000b5768 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b5768:	7c00      	ldrb	r0, [r0, #16]
   b576a:	2300      	movs	r3, #0
   b576c:	f7ff bb4a 	b.w	b4e04 <hal_usart_begin_config>

000b5770 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b5770:	2200      	movs	r2, #0
   b5772:	f7ff bff9 	b.w	b5768 <_ZN11USARTSerial5beginEmm>

000b5776 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5776:	4770      	bx	lr

000b5778 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b577a:	4606      	mov	r6, r0
   b577c:	4615      	mov	r5, r2
   b577e:	460c      	mov	r4, r1
   b5780:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5782:	42bc      	cmp	r4, r7
   b5784:	d006      	beq.n	b5794 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5786:	6833      	ldr	r3, [r6, #0]
   b5788:	f814 1b01 	ldrb.w	r1, [r4], #1
   b578c:	689b      	ldr	r3, [r3, #8]
   b578e:	4630      	mov	r0, r6
   b5790:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5792:	e7f6      	b.n	b5782 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5794:	4628      	mov	r0, r5
   b5796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5798 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5798:	7c00      	ldrb	r0, [r0, #16]
   b579a:	2200      	movs	r2, #0
   b579c:	f7ff bb5a 	b.w	b4e54 <hal_i2c_write>

000b57a0 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b57a0:	7c00      	ldrb	r0, [r0, #16]
   b57a2:	2100      	movs	r1, #0
   b57a4:	f7ff bb5e 	b.w	b4e64 <hal_i2c_available>

000b57a8 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b57a8:	7c00      	ldrb	r0, [r0, #16]
   b57aa:	2100      	movs	r1, #0
   b57ac:	f7ff bb62 	b.w	b4e74 <hal_i2c_read>

000b57b0 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b57b0:	7c00      	ldrb	r0, [r0, #16]
   b57b2:	2100      	movs	r1, #0
   b57b4:	f7ff bb66 	b.w	b4e84 <hal_i2c_peek>

000b57b8 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b57b8:	7c00      	ldrb	r0, [r0, #16]
   b57ba:	2100      	movs	r1, #0
   b57bc:	f7ff bb6a 	b.w	b4e94 <hal_i2c_flush>

000b57c0 <_ZN7TwoWireD0Ev>:
   b57c0:	b510      	push	{r4, lr}
   b57c2:	2114      	movs	r1, #20
   b57c4:	4604      	mov	r4, r0
   b57c6:	f7ff f88e 	bl	b48e6 <_ZdlPvj>
   b57ca:	4620      	mov	r0, r4
   b57cc:	bd10      	pop	{r4, pc}
	...

000b57d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b57d0:	b538      	push	{r3, r4, r5, lr}
   b57d2:	4604      	mov	r4, r0
   b57d4:	4615      	mov	r5, r2
   b57d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b57da:	2200      	movs	r2, #0
   b57dc:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b57e0:	4b09      	ldr	r3, [pc, #36]	; (b5808 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b57e2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b57e4:	4608      	mov	r0, r1
   b57e6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b57e8:	4629      	mov	r1, r5
   b57ea:	f7ff fb5b 	bl	b4ea4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b57ee:	30bf      	adds	r0, #191	; 0xbf
   b57f0:	d108      	bne.n	b5804 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b57f2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b57f4:	07db      	lsls	r3, r3, #31
   b57f6:	d505      	bpl.n	b5804 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b57f8:	6868      	ldr	r0, [r5, #4]
   b57fa:	f7ff fc3f 	bl	b507c <free>
    free(conf.tx_buffer);
   b57fe:	68e8      	ldr	r0, [r5, #12]
   b5800:	f7ff fc3c 	bl	b507c <free>
}
   b5804:	4620      	mov	r0, r4
   b5806:	bd38      	pop	{r3, r4, r5, pc}
   b5808:	000b5dfc 	.word	0x000b5dfc

000b580c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b580c:	2300      	movs	r3, #0
   b580e:	7c00      	ldrb	r0, [r0, #16]
   b5810:	461a      	mov	r2, r3
   b5812:	4619      	mov	r1, r3
   b5814:	f7ff bb06 	b.w	b4e24 <hal_i2c_begin>

000b5818 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b5818:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b581a:	2200      	movs	r2, #0
   b581c:	2318      	movs	r3, #24
   b581e:	e9cd 2200 	strd	r2, r2, [sp]
   b5822:	f8ad 3000 	strh.w	r3, [sp]
    };
   b5826:	780b      	ldrb	r3, [r1, #0]
   b5828:	f88d 3004 	strb.w	r3, [sp, #4]
   b582c:	684b      	ldr	r3, [r1, #4]
   b582e:	9302      	str	r3, [sp, #8]
   b5830:	68cb      	ldr	r3, [r1, #12]
   b5832:	9303      	str	r3, [sp, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0),
   b5834:	7a0b      	ldrb	r3, [r1, #8]
   b5836:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b5838:	7c00      	ldrb	r0, [r0, #16]
    };
   b583a:	690b      	ldr	r3, [r1, #16]
   b583c:	9305      	str	r3, [sp, #20]
   b583e:	4669      	mov	r1, sp
   b5840:	f7ff fb38 	bl	b4eb4 <hal_i2c_request_ex>
}
   b5844:	b007      	add	sp, #28
   b5846:	f85d fb04 	ldr.w	pc, [sp], #4

000b584a <_ZN7TwoWire11requestFromEhjh>:
{
   b584a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        buffer_(nullptr) {
   b584c:	f88d 1004 	strb.w	r1, [sp, #4]
   b5850:	2100      	movs	r1, #0
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b5852:	1a5b      	subs	r3, r3, r1
   b5854:	f04f 0c64 	mov.w	ip, #100	; 0x64
   b5858:	e9cd c104 	strd	ip, r1, [sp, #16]
   b585c:	bf18      	it	ne
   b585e:	2301      	movne	r3, #1
   b5860:	a901      	add	r1, sp, #4
    size_ = size;
   b5862:	9202      	str	r2, [sp, #8]
   b5864:	f88d 300c 	strb.w	r3, [sp, #12]
   b5868:	f7ff ffd6 	bl	b5818 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b586c:	b007      	add	sp, #28
   b586e:	f85d fb04 	ldr.w	pc, [sp], #4

000b5872 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b5872:	2301      	movs	r3, #1
   b5874:	f7ff bfe9 	b.w	b584a <_ZN7TwoWire11requestFromEhjh>

000b5878 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5878:	7c00      	ldrb	r0, [r0, #16]
   b587a:	2200      	movs	r2, #0
   b587c:	f7ff bada 	b.w	b4e34 <hal_i2c_begin_transmission>

000b5880 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5880:	7c00      	ldrb	r0, [r0, #16]
   b5882:	2200      	movs	r2, #0
   b5884:	f7ff bade 	b.w	b4e44 <hal_i2c_end_transmission>

000b5888 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b5888:	2101      	movs	r1, #1
   b588a:	f7ff bff9 	b.w	b5880 <_ZN7TwoWire15endTransmissionEh>
	...

000b5890 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
      : address_{address},
   b5890:	4b05      	ldr	r3, [pc, #20]	; (b58a8 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        buffer_(nullptr) {
   b5892:	21ff      	movs	r1, #255	; 0xff
   b5894:	2200      	movs	r2, #0
   b5896:	e9c3 1200 	strd	r1, r2, [r3]
   b589a:	2001      	movs	r0, #1
   b589c:	2164      	movs	r1, #100	; 0x64
   b589e:	e9c3 0102 	strd	r0, r1, [r3, #8]
   b58a2:	611a      	str	r2, [r3, #16]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
   b58a4:	4770      	bx	lr
   b58a6:	bf00      	nop
   b58a8:	2003dfac 	.word	0x2003dfac

000b58ac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b58ac:	2300      	movs	r3, #0
   b58ae:	6840      	ldr	r0, [r0, #4]
   b58b0:	461a      	mov	r2, r3
   b58b2:	f7ff bb63 	b.w	b4f7c <network_connect>

000b58b6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b58b6:	6840      	ldr	r0, [r0, #4]
   b58b8:	2200      	movs	r2, #0
   b58ba:	2102      	movs	r1, #2
   b58bc:	f7ff bb6e 	b.w	b4f9c <network_disconnect>

000b58c0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b58c0:	2200      	movs	r2, #0
   b58c2:	6840      	ldr	r0, [r0, #4]
   b58c4:	4611      	mov	r1, r2
   b58c6:	f7ff bb61 	b.w	b4f8c <network_connecting>

000b58ca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b58ca:	2200      	movs	r2, #0
   b58cc:	6840      	ldr	r0, [r0, #4]
   b58ce:	4611      	mov	r1, r2
   b58d0:	f7ff bb6c 	b.w	b4fac <network_ready>

000b58d4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b58d4:	2300      	movs	r3, #0
   b58d6:	6840      	ldr	r0, [r0, #4]
   b58d8:	461a      	mov	r2, r3
   b58da:	4619      	mov	r1, r3
   b58dc:	f7ff bb6e 	b.w	b4fbc <network_on>

000b58e0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b58e0:	2300      	movs	r3, #0
   b58e2:	6840      	ldr	r0, [r0, #4]
   b58e4:	461a      	mov	r2, r3
   b58e6:	4619      	mov	r1, r3
   b58e8:	f7ff bb70 	b.w	b4fcc <network_off>

000b58ec <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b58ec:	6840      	ldr	r0, [r0, #4]
   b58ee:	2100      	movs	r1, #0
   b58f0:	f7ff bb94 	b.w	b501c <network_is_on>

000b58f4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b58f4:	6840      	ldr	r0, [r0, #4]
   b58f6:	2100      	movs	r1, #0
   b58f8:	f7ff bb98 	b.w	b502c <network_is_off>

000b58fc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b58fc:	6840      	ldr	r0, [r0, #4]
   b58fe:	2200      	movs	r2, #0
   b5900:	f081 0101 	eor.w	r1, r1, #1
   b5904:	f7ff bb6a 	b.w	b4fdc <network_listen>

000b5908 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5908:	6840      	ldr	r0, [r0, #4]
   b590a:	2200      	movs	r2, #0
   b590c:	f7ff bb76 	b.w	b4ffc <network_set_listen_timeout>

000b5910 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5910:	2200      	movs	r2, #0
   b5912:	6840      	ldr	r0, [r0, #4]
   b5914:	4611      	mov	r1, r2
   b5916:	f7ff bb79 	b.w	b500c <network_get_listen_timeout>

000b591a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b591a:	2200      	movs	r2, #0
   b591c:	6840      	ldr	r0, [r0, #4]
   b591e:	4611      	mov	r1, r2
   b5920:	f7ff bb64 	b.w	b4fec <network_listening>

000b5924 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
   b5924:	6840      	ldr	r0, [r0, #4]
   b5926:	2100      	movs	r1, #0
   b5928:	f7ff bb90 	b.w	b504c <network_is_preferred>

000b592c <_ZN5spark12NetworkClass7resolveEPKcb>:
}

IPAddress NetworkClass::resolve(const char* name, bool flushCache) {
   b592c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5930:	2600      	movs	r6, #0
IPAddress NetworkClass::resolve(const char* name, bool flushCache) {
   b5932:	b099      	sub	sp, #100	; 0x64
   b5934:	460d      	mov	r5, r1
   b5936:	4614      	mov	r4, r2
   b5938:	4698      	mov	r8, r3
   b593a:	4607      	mov	r7, r0
    IPAddress addr;
   b593c:	f7ff fdb8 	bl	b54b0 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   b5940:	221c      	movs	r2, #28
   b5942:	4631      	mov	r1, r6
   b5944:	a811      	add	r0, sp, #68	; 0x44
    struct addrinfo *ai = nullptr;
   b5946:	9603      	str	r6, [sp, #12]
    struct addrinfo hints = {};
   b5948:	f000 f924 	bl	b5b94 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
    if (flushCache) {
   b594c:	f1b8 0f00 	cmp.w	r8, #0
   b5950:	d12c      	bne.n	b59ac <_ZN5spark12NetworkClass7resolveEPKcb+0x80>
    hints.ai_flags = AI_ADDRCONFIG;
   b5952:	2340      	movs	r3, #64	; 0x40
        return iface_;
   b5954:	6868      	ldr	r0, [r5, #4]
        hints.ai_flags |= AI_FLUSHCACHE;
   b5956:	9310      	str	r3, [sp, #64]	; 0x40
    }
    hints.ai_family = AF_UNSPEC;
    if_t iface = nullptr;
   b5958:	9604      	str	r6, [sp, #16]
    if ((network_interface_t)*this != NETWORK_INTERFACE_ALL) {
   b595a:	b118      	cbz	r0, b5964 <_ZN5spark12NetworkClass7resolveEPKcb+0x38>
        if_get_by_index((network_interface_t)*this, &iface);
   b595c:	a904      	add	r1, sp, #16
   b595e:	b2c0      	uxtb	r0, r0
   b5960:	f7ff f9f8 	bl	b4d54 <if_get_by_index>
    }
    const int r = netdb_getaddrinfo_ex(name, nullptr, &hints, &ai, iface);
   b5964:	9b04      	ldr	r3, [sp, #16]
   b5966:	9300      	str	r3, [sp, #0]
   b5968:	4620      	mov	r0, r4
   b596a:	ab03      	add	r3, sp, #12
   b596c:	aa10      	add	r2, sp, #64	; 0x40
   b596e:	2100      	movs	r1, #0
   b5970:	f7ff f9e8 	bl	b4d44 <netdb_getaddrinfo_ex>
    if (!r) {
   b5974:	4604      	mov	r4, r0
   b5976:	2800      	cmp	r0, #0
   b5978:	d14d      	bne.n	b5a16 <_ZN5spark12NetworkClass7resolveEPKcb+0xea>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b597a:	4602      	mov	r2, r0
   b597c:	2101      	movs	r1, #1
   b597e:	6868      	ldr	r0, [r5, #4]
   b5980:	f7ff fb14 	bl	b4fac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5984:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5986:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5988:	4622      	mov	r2, r4
   b598a:	6868      	ldr	r0, [r5, #4]
   b598c:	f7ff fb0e 	bl	b4fac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5990:	9e03      	ldr	r6, [sp, #12]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5992:	4681      	mov	r9, r0
        bool ok = false;
   b5994:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5996:	2e00      	cmp	r6, #0
   b5998:	d03d      	beq.n	b5a16 <_ZN5spark12NetworkClass7resolveEPKcb+0xea>
   b599a:	2900      	cmp	r1, #0
   b599c:	d13b      	bne.n	b5a16 <_ZN5spark12NetworkClass7resolveEPKcb+0xea>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b599e:	6873      	ldr	r3, [r6, #4]
   b59a0:	2b02      	cmp	r3, #2
   b59a2:	d005      	beq.n	b59b0 <_ZN5spark12NetworkClass7resolveEPKcb+0x84>
   b59a4:	2b0a      	cmp	r3, #10
   b59a6:	d013      	beq.n	b59d0 <_ZN5spark12NetworkClass7resolveEPKcb+0xa4>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b59a8:	69f6      	ldr	r6, [r6, #28]
   b59aa:	e7f4      	b.n	b5996 <_ZN5spark12NetworkClass7resolveEPKcb+0x6a>
        hints.ai_flags |= AI_FLUSHCACHE;
   b59ac:	4b1d      	ldr	r3, [pc, #116]	; (b5a24 <_ZN5spark12NetworkClass7resolveEPKcb+0xf8>)
   b59ae:	e7d1      	b.n	b5954 <_ZN5spark12NetworkClass7resolveEPKcb+0x28>
                case AF_INET: {
                    if (!ipv4) {
   b59b0:	f1b8 0f00 	cmp.w	r8, #0
   b59b4:	d0f8      	beq.n	b59a8 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b59b6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b59b8:	a80a      	add	r0, sp, #40	; 0x28
   b59ba:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b59bc:	ad0b      	add	r5, sp, #44	; 0x2c
        return *this = IPAddress(address);
   b59be:	f7ff fda5 	bl	b550c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b59c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b59c4:	1d3c      	adds	r4, r7, #4
   b59c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b59c8:	682b      	ldr	r3, [r5, #0]
   b59ca:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b59cc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b59ce:	e7eb      	b.n	b59a8 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b59d0:	f1b9 0f00 	cmp.w	r9, #0
   b59d4:	d0e8      	beq.n	b59a8 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b59d6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b59d8:	2210      	movs	r2, #16
   b59da:	a805      	add	r0, sp, #20
   b59dc:	f000 f8da 	bl	b5b94 <memset>
                    a.v = 6;
   b59e0:	2306      	movs	r3, #6
   b59e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b59e6:	ad05      	add	r5, sp, #20
   b59e8:	f104 0308 	add.w	r3, r4, #8
   b59ec:	3418      	adds	r4, #24
   b59ee:	6818      	ldr	r0, [r3, #0]
   b59f0:	6859      	ldr	r1, [r3, #4]
   b59f2:	462a      	mov	r2, r5
   b59f4:	c203      	stmia	r2!, {r0, r1}
   b59f6:	3308      	adds	r3, #8
   b59f8:	42a3      	cmp	r3, r4
   b59fa:	4615      	mov	r5, r2
   b59fc:	d1f7      	bne.n	b59ee <_ZN5spark12NetworkClass7resolveEPKcb+0xc2>
                    addr = IPAddress(a);
   b59fe:	a905      	add	r1, sp, #20
   b5a00:	a80a      	add	r0, sp, #40	; 0x28
class IPAddress : public Printable {
   b5a02:	ad0b      	add	r5, sp, #44	; 0x2c
   b5a04:	f7ff fd62 	bl	b54cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5a0a:	1d3c      	adds	r4, r7, #4
   b5a0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5a0e:	682b      	ldr	r3, [r5, #0]
   b5a10:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5a12:	4649      	mov	r1, r9
   b5a14:	e7c8      	b.n	b59a8 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5a16:	9803      	ldr	r0, [sp, #12]
   b5a18:	f7ff f98c 	bl	b4d34 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5a1c:	4638      	mov	r0, r7
   b5a1e:	b019      	add	sp, #100	; 0x64
   b5a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5a24:	40000040 	.word	0x40000040

000b5a28 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
   b5a28:	3803      	subs	r0, #3
   b5a2a:	2803      	cmp	r0, #3
   b5a2c:	bf9a      	itte	ls
   b5a2e:	4b02      	ldrls	r3, [pc, #8]	; (b5a38 <_ZN5spark12NetworkClass4fromEm+0x10>)
   b5a30:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
   b5a34:	4801      	ldrhi	r0, [pc, #4]	; (b5a3c <_ZN5spark12NetworkClass4fromEm+0x14>)
}
   b5a36:	4770      	bx	lr
   b5a38:	000b5e20 	.word	0x000b5e20
   b5a3c:	2003dfc0 	.word	0x2003dfc0

000b5a40 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
   b5a40:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
   b5a42:	2200      	movs	r2, #0
   b5a44:	6840      	ldr	r0, [r0, #4]
   b5a46:	f7ff faf9 	bl	b503c <network_prefer>
}
   b5a4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
   b5a4e:	f7ff bfeb 	b.w	b5a28 <_ZN5spark12NetworkClass4fromEm>
	...

000b5a54 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
            : iface_(iface) {
   b5a54:	4b02      	ldr	r3, [pc, #8]	; (b5a60 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5a56:	4a03      	ldr	r2, [pc, #12]	; (b5a64 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5a58:	601a      	str	r2, [r3, #0]
   b5a5a:	2200      	movs	r2, #0
   b5a5c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b5a5e:	4770      	bx	lr
   b5a60:	2003dfc0 	.word	0x2003dfc0
   b5a64:	000b5e38 	.word	0x000b5e38

000b5a68 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5a68:	4770      	bx	lr
	...

000b5a6c <_Z20acquireSerial1Bufferv>:
{
   b5a6c:	b538      	push	{r3, r4, r5, lr}
   b5a6e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5a70:	2514      	movs	r5, #20
   b5a72:	462a      	mov	r2, r5
   b5a74:	2100      	movs	r1, #0
   b5a76:	f000 f88d 	bl	b5b94 <memset>
   b5a7a:	8025      	strh	r5, [r4, #0]
   b5a7c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5a7e:	4907      	ldr	r1, [pc, #28]	; (b5a9c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5a80:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5a82:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5a84:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5a86:	f000 f86f 	bl	b5b68 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5a8a:	4904      	ldr	r1, [pc, #16]	; (b5a9c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5a8c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5a8e:	4628      	mov	r0, r5
   b5a90:	f000 f86a 	bl	b5b68 <_ZnajRKSt9nothrow_t>
    };
   b5a94:	60e0      	str	r0, [r4, #12]
}
   b5a96:	4620      	mov	r0, r4
   b5a98:	bd38      	pop	{r3, r4, r5, pc}
   b5a9a:	bf00      	nop
   b5a9c:	000b5e74 	.word	0x000b5e74

000b5aa0 <_Z22__fetch_global_Serial1v>:
{
   b5aa0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5aa2:	4d0e      	ldr	r5, [pc, #56]	; (b5adc <_Z22__fetch_global_Serial1v+0x3c>)
   b5aa4:	7829      	ldrb	r1, [r5, #0]
   b5aa6:	f3bf 8f5b 	dmb	ish
   b5aaa:	f011 0401 	ands.w	r4, r1, #1
{
   b5aae:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5ab0:	d111      	bne.n	b5ad6 <_Z22__fetch_global_Serial1v+0x36>
   b5ab2:	4628      	mov	r0, r5
   b5ab4:	f7ff fafa 	bl	b50ac <__cxa_guard_acquire>
   b5ab8:	b168      	cbz	r0, b5ad6 <_Z22__fetch_global_Serial1v+0x36>
   b5aba:	a801      	add	r0, sp, #4
   b5abc:	f7ff ffd6 	bl	b5a6c <_Z20acquireSerial1Bufferv>
   b5ac0:	aa01      	add	r2, sp, #4
   b5ac2:	4621      	mov	r1, r4
   b5ac4:	4806      	ldr	r0, [pc, #24]	; (b5ae0 <_Z22__fetch_global_Serial1v+0x40>)
   b5ac6:	f7ff fe3b 	bl	b5740 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5aca:	4628      	mov	r0, r5
   b5acc:	f7ff faf6 	bl	b50bc <__cxa_guard_release>
   b5ad0:	4804      	ldr	r0, [pc, #16]	; (b5ae4 <_Z22__fetch_global_Serial1v+0x44>)
   b5ad2:	f000 f84b 	bl	b5b6c <atexit>
    return serial1;
}
   b5ad6:	4802      	ldr	r0, [pc, #8]	; (b5ae0 <_Z22__fetch_global_Serial1v+0x40>)
   b5ad8:	b007      	add	sp, #28
   b5ada:	bd30      	pop	{r4, r5, pc}
   b5adc:	2003dfc8 	.word	0x2003dfc8
   b5ae0:	2003dfcc 	.word	0x2003dfcc
   b5ae4:	000b5a69 	.word	0x000b5a69

000b5ae8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5ae8:	4770      	bx	lr
	...

000b5aec <_Z17acquireWireBufferv>:
{
   b5aec:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5aee:	4b0a      	ldr	r3, [pc, #40]	; (b5b18 <_Z17acquireWireBufferv+0x2c>)
   b5af0:	6003      	str	r3, [r0, #0]
   b5af2:	2301      	movs	r3, #1
{
   b5af4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5af6:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5af8:	4908      	ldr	r1, [pc, #32]	; (b5b1c <_Z17acquireWireBufferv+0x30>)
   b5afa:	2020      	movs	r0, #32
   b5afc:	f000 f834 	bl	b5b68 <_ZnajRKSt9nothrow_t>
	};
   b5b00:	2520      	movs	r5, #32
   b5b02:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5b04:	4905      	ldr	r1, [pc, #20]	; (b5b1c <_Z17acquireWireBufferv+0x30>)
	};
   b5b06:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5b08:	4628      	mov	r0, r5
   b5b0a:	f000 f82d 	bl	b5b68 <_ZnajRKSt9nothrow_t>
	};
   b5b0e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5b12:	4620      	mov	r0, r4
   b5b14:	bd38      	pop	{r3, r4, r5, pc}
   b5b16:	bf00      	nop
   b5b18:	00010018 	.word	0x00010018
   b5b1c:	000b5e74 	.word	0x000b5e74

000b5b20 <_Z19__fetch_global_Wirev>:
{
   b5b20:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5b22:	4d0e      	ldr	r5, [pc, #56]	; (b5b5c <_Z19__fetch_global_Wirev+0x3c>)
   b5b24:	7829      	ldrb	r1, [r5, #0]
   b5b26:	f3bf 8f5b 	dmb	ish
   b5b2a:	f011 0401 	ands.w	r4, r1, #1
{
   b5b2e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5b30:	d111      	bne.n	b5b56 <_Z19__fetch_global_Wirev+0x36>
   b5b32:	4628      	mov	r0, r5
   b5b34:	f7ff faba 	bl	b50ac <__cxa_guard_acquire>
   b5b38:	b168      	cbz	r0, b5b56 <_Z19__fetch_global_Wirev+0x36>
   b5b3a:	4668      	mov	r0, sp
   b5b3c:	f7ff ffd6 	bl	b5aec <_Z17acquireWireBufferv>
   b5b40:	466a      	mov	r2, sp
   b5b42:	4621      	mov	r1, r4
   b5b44:	4806      	ldr	r0, [pc, #24]	; (b5b60 <_Z19__fetch_global_Wirev+0x40>)
   b5b46:	f7ff fe43 	bl	b57d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5b4a:	4628      	mov	r0, r5
   b5b4c:	f7ff fab6 	bl	b50bc <__cxa_guard_release>
   b5b50:	4804      	ldr	r0, [pc, #16]	; (b5b64 <_Z19__fetch_global_Wirev+0x44>)
   b5b52:	f000 f80b 	bl	b5b6c <atexit>
	return wire;
}
   b5b56:	4802      	ldr	r0, [pc, #8]	; (b5b60 <_Z19__fetch_global_Wirev+0x40>)
   b5b58:	b007      	add	sp, #28
   b5b5a:	bd30      	pop	{r4, r5, pc}
   b5b5c:	2003dfe4 	.word	0x2003dfe4
   b5b60:	2003dfe8 	.word	0x2003dfe8
   b5b64:	000b5ae9 	.word	0x000b5ae9

000b5b68 <_ZnajRKSt9nothrow_t>:
   b5b68:	f7fe bebb 	b.w	b48e2 <_Znaj>

000b5b6c <atexit>:
   b5b6c:	2300      	movs	r3, #0
   b5b6e:	4601      	mov	r1, r0
   b5b70:	461a      	mov	r2, r3
   b5b72:	4618      	mov	r0, r3
   b5b74:	f7fe beb9 	b.w	b48ea <__register_exitproc>

000b5b78 <memcpy>:
   b5b78:	440a      	add	r2, r1
   b5b7a:	4291      	cmp	r1, r2
   b5b7c:	f100 33ff 	add.w	r3, r0, #4294967295
   b5b80:	d100      	bne.n	b5b84 <memcpy+0xc>
   b5b82:	4770      	bx	lr
   b5b84:	b510      	push	{r4, lr}
   b5b86:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5b8a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5b8e:	4291      	cmp	r1, r2
   b5b90:	d1f9      	bne.n	b5b86 <memcpy+0xe>
   b5b92:	bd10      	pop	{r4, pc}

000b5b94 <memset>:
   b5b94:	4402      	add	r2, r0
   b5b96:	4603      	mov	r3, r0
   b5b98:	4293      	cmp	r3, r2
   b5b9a:	d100      	bne.n	b5b9e <memset+0xa>
   b5b9c:	4770      	bx	lr
   b5b9e:	f803 1b01 	strb.w	r1, [r3], #1
   b5ba2:	e7f9      	b.n	b5b98 <memset+0x4>

000b5ba4 <srand>:
   b5ba4:	b538      	push	{r3, r4, r5, lr}
   b5ba6:	4b10      	ldr	r3, [pc, #64]	; (b5be8 <srand+0x44>)
   b5ba8:	681d      	ldr	r5, [r3, #0]
   b5baa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5bac:	4604      	mov	r4, r0
   b5bae:	b9b3      	cbnz	r3, b5bde <srand+0x3a>
   b5bb0:	2018      	movs	r0, #24
   b5bb2:	f7ff fa5b 	bl	b506c <malloc>
   b5bb6:	4602      	mov	r2, r0
   b5bb8:	63a8      	str	r0, [r5, #56]	; 0x38
   b5bba:	b920      	cbnz	r0, b5bc6 <srand+0x22>
   b5bbc:	4b0b      	ldr	r3, [pc, #44]	; (b5bec <srand+0x48>)
   b5bbe:	480c      	ldr	r0, [pc, #48]	; (b5bf0 <srand+0x4c>)
   b5bc0:	2142      	movs	r1, #66	; 0x42
   b5bc2:	f7ff fa63 	bl	b508c <__assert_func>
   b5bc6:	490b      	ldr	r1, [pc, #44]	; (b5bf4 <srand+0x50>)
   b5bc8:	4b0b      	ldr	r3, [pc, #44]	; (b5bf8 <srand+0x54>)
   b5bca:	e9c0 1300 	strd	r1, r3, [r0]
   b5bce:	4b0b      	ldr	r3, [pc, #44]	; (b5bfc <srand+0x58>)
   b5bd0:	6083      	str	r3, [r0, #8]
   b5bd2:	230b      	movs	r3, #11
   b5bd4:	8183      	strh	r3, [r0, #12]
   b5bd6:	2100      	movs	r1, #0
   b5bd8:	2001      	movs	r0, #1
   b5bda:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5bde:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5be0:	2200      	movs	r2, #0
   b5be2:	611c      	str	r4, [r3, #16]
   b5be4:	615a      	str	r2, [r3, #20]
   b5be6:	bd38      	pop	{r3, r4, r5, pc}
   b5be8:	2003de94 	.word	0x2003de94
   b5bec:	000b5e75 	.word	0x000b5e75
   b5bf0:	000b5e8c 	.word	0x000b5e8c
   b5bf4:	abcd330e 	.word	0xabcd330e
   b5bf8:	e66d1234 	.word	0xe66d1234
   b5bfc:	0005deec 	.word	0x0005deec

000b5c00 <dynalib_user>:
   b5c00:	000b486d 000b48a9 000b48d1 000b48d5     mH...H...H...H..
   b5c10:	00000000 736e6553 6920726f 2074696e     ....Sensor init 
   b5c20:	21727265 53002121 6f736e65 6f572072     err!!!.Sensor Wo
   b5c30:	6e696b72 6d695467 25203a65 2066322e     rkingTime: %.2f 
   b5c40:	20310048 72756f48 69615220 6c61666e     H.1 Hour Rainfal
   b5c50:	25203a6c 2066322e 52006d6d 54207761     l: %.2f mm.Raw T
   b5c60:	69707069 4320676e 746e756f 25203a73     ipping Counts: %
   b5c70:	0000756c                                lu..

000b5c74 <_ZTV26DFRobot_RainfallSensor_I2C>:
	...
   b5c7c:	000b4ac1 000b4a71 000b4a79 000b4a75     .J..qJ..yJ..uJ..

000b5c8c <_ZTVN5spark13EthernetClassE>:
	...
   b5c94:	000b512b 000b5121 000b5117 000b510d     +Q..!Q...Q...Q..
   b5ca4:	000b5101 000b50f5 000b58ed 000b58f5     .Q...P...X...X..
   b5cb4:	000b50e9 000b50e1 000b50d7 000b50cd     .P...P...P...P..
   b5cc4:	000b5a41 000b5925 000b592d              AZ..%Y..-Y..

000b5cd0 <_ZTVN8particle11TetherClassE>:
	...
   b5cd8:	000b51b7 000b51ad 000b51a3 000b5199     .Q...Q...Q...Q..
   b5ce8:	000b518d 000b5181 000b58ed 000b58f5     .Q...Q...X...X..
   b5cf8:	000b5175 000b516d 000b5163 000b5159     uQ..mQ..cQ..YQ..
   b5d08:	000b5a41 000b5925 000b592d 00707061     AZ..%Y..-Y..app.
   b5d18:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   b5d28:	007a2553 74637361 00656d69              S%z.asctime.

000b5d34 <_ZTV9IPAddress>:
	...
   b5d3c:	000b544d 000b543d 000b543f              MT..=T..?T..

000b5d48 <_ZTV9USBSerial>:
	...
   b5d50:	000b5533 000b559b 000b5571 000b5209     3U...U..qU...R..
   b5d60:	000b5563 000b5535 000b5545 000b5595     cU..5U..EU...U..
   b5d70:	000b52a1 000b5555 000b552d              .R..UU..-U..

000b5d7c <_ZTVN5spark13CellularClassE>:
	...
   b5d84:	000b568b 000b5681 000b5677 000b562d     .V...V..wV..-V..
   b5d94:	000b566b 000b565f 000b58ed 000b58f5     kV.._V...X...X..
   b5da4:	000b5653 000b564b 000b5641 000b5637     SV..KV..AV..7V..
   b5db4:	000b5a41 000b5925 000b592d              AZ..%Y..-Y..

000b5dc0 <_ZTV11USARTSerial>:
	...
   b5dc8:	000b56c5 000b5731 000b5709 000b5209     .V..1W...W...R..
   b5dd8:	000b56d9 000b56f5 000b56e7 000b5703     .V...V...V...W..
   b5de8:	000b52a1 000b56c7 000b56cb              .R...V...V..

000b5df4 <_ZTV7TwoWire>:
	...
   b5dfc:	000b5777 000b57c1 000b5799 000b5779     wW...W...W..yW..
   b5e0c:	000b57a1 000b57a9 000b57b1 000b57b9     .W...W...W...W..
   b5e1c:	000b52a1                                .R..

000b5e20 <CSWTCH.155>:
   b5e20:	2003df14 2003df7c 2003dfc0 2003df28     ... |.. ... (.. 

000b5e30 <_ZTVN5spark12NetworkClassE>:
	...
   b5e38:	000b58ad 000b58b7 000b58c1 000b58cb     .X...X...X...X..
   b5e48:	000b58d5 000b58e1 000b58ed 000b58f5     .X...X...X...X..
   b5e58:	000b58fd 000b5909 000b5911 000b591b     .X...Y...Y...Y..
   b5e68:	000b5a41 000b5925 000b592d              AZ..%Y..-Y..

000b5e74 <_ZSt7nothrow>:
   b5e74:	45455200 6d20544e 6f6c6c61 75732063     .REENT malloc su
   b5e84:	65656363 00646564 746e6d2f 726f772f     cceeded./mnt/wor
   b5e94:	6170736b 772f6563 736b726f 65636170     kspace/workspace
   b5ea4:	4343472f 2d30312d 65706970 656e696c     /GCC-10-pipeline
   b5eb4:	6e656a2f 736e696b 4343472d 2d30312d     /jenkins-GCC-10-
   b5ec4:	65706970 656e696c 5f38342d 30323032     pipeline-48_2020
   b5ed4:	34323131 3036315f 30383136 2f313436     1124_1606180641/
   b5ee4:	2f637273 6c77656e 6e2f6269 696c7765     src/newlib/newli
   b5ef4:	696c2f62 732f6362 696c6474 61722f62     b/libc/stdlib/ra
   b5f04:	632e646e                                 nd.c.

000b5f09 <link_const_data_end>:
   b5f09:	00          	.byte	0x00
	...

000b5f0c <link_constructors_location>:
   b5f0c:	000b4a59 	.word	0x000b4a59
   b5f10:	000b5135 	.word	0x000b5135
   b5f14:	000b5149 	.word	0x000b5149
   b5f18:	000b51c1 	.word	0x000b51c1
   b5f1c:	000b51d5 	.word	0x000b51d5
   b5f20:	000b51f9 	.word	0x000b51f9
   b5f24:	000b52cd 	.word	0x000b52cd
   b5f28:	000b52dd 	.word	0x000b52dd
   b5f2c:	000b52f9 	.word	0x000b52f9
   b5f30:	000b5695 	.word	0x000b5695
   b5f34:	000b5891 	.word	0x000b5891
   b5f38:	000b5a55 	.word	0x000b5a55
